<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Abstract.Fakes</name>
    </assembly>
    <members>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.SystemAbstractDelegates">
            <summary>Contains custom delegates used for the stubs and shims of System.Abstract</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot">
            <summary>Shim type of System.Abstract.EventSourcing.AggregateRoot</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.#ctor(System.Abstract.EventSourcing.AggregateRoot)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.Bind(System.Abstract.EventSourcing.IAggregateRoot)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.Bind(System.Abstract.EventSourcing.IAggregateRootStateAccessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AggregateIDGet">
            <summary>Sets the shim of AggregateRoot.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AggregateIDSetObject">
            <summary>Sets the shim of AggregateRoot.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.ApplyEventEvent">
            <summary>Sets the shim of AggregateRoot.ApplyEvent(Event e)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.Constructor">
            <summary>Sets the shim of AggregateRoot.AggregateRoot()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.ConstructorAggregateRootOptions">
            <summary>Sets the shim of AggregateRoot.AggregateRoot(AggregateRootOptions options)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.EventDispatcherGet">
            <summary>Sets the shim of AggregateRoot.get_EventDispatcher()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.EventDispatcherSetIAggregateRootEventDispatcher">
            <summary>Sets the shim of AggregateRoot.set_EventDispatcher(IAggregateRootEventDispatcher value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.HasChangedGet">
            <summary>Sets the shim of AggregateRoot.get_HasChanged()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.LastEventDateGet">
            <summary>Sets the shim of AggregateRoot.get_LastEventDate()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.LastEventDateSetDateTime">
            <summary>Sets the shim of AggregateRoot.set_LastEventDate(DateTime value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.LastEventSequenceGet">
            <summary>Sets the shim of AggregateRoot.get_LastEventSequence()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.LastEventSequenceSetInt32">
            <summary>Sets the shim of AggregateRoot.set_LastEventSequence(Int32 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.StaticConstructor">
            <summary>Sets the shim of AggregateRoot.AggregateRoot()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.SystemAbstractEventSourcingIAggregateRootStateAccessorGetUncommittedChanges">
            <summary>Sets the shim of AggregateRoot.System.Abstract.EventSourcing.IAggregateRootStateAccessor.GetUncommittedChanges()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.SystemAbstractEventSourcingIAggregateRootStateAccessorLoadFromHistoryIEnumerableOfEvent">
            <summary>Sets the shim of AggregateRoot.System.Abstract.EventSourcing.IAggregateRootStateAccessor.LoadFromHistory(IEnumerable`1&lt;Event&gt; events)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.SystemAbstractEventSourcingIAggregateRootStateAccessorMarkChangesAsCommitted">
            <summary>Sets the shim of AggregateRoot.System.Abstract.EventSourcing.IAggregateRootStateAccessor.MarkChangesAsCommitted()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot._SystemAbstractEventSourcingIAggregateRootStateAccessorLoadFromHistoryb__0Event">
            <summary>Sets the shim of AggregateRoot.&lt;System.Abstract.EventSourcing.IAggregateRootStateAccessor.LoadFromHistory&gt;b__0(Event x)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.AggregateIDGet">
            <summary>Sets the shim of AggregateRoot.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.AggregateIDSetObject">
            <summary>Sets the shim of AggregateRoot.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.ApplyEventEvent">
            <summary>Sets the shim of AggregateRoot.ApplyEvent(Event e)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.EventDispatcherGet">
            <summary>Sets the shim of AggregateRoot.get_EventDispatcher()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.EventDispatcherSetIAggregateRootEventDispatcher">
            <summary>Sets the shim of AggregateRoot.set_EventDispatcher(IAggregateRootEventDispatcher value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.HasChangedGet">
            <summary>Sets the shim of AggregateRoot.get_HasChanged()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.LastEventDateGet">
            <summary>Sets the shim of AggregateRoot.get_LastEventDate()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.LastEventDateSetDateTime">
            <summary>Sets the shim of AggregateRoot.set_LastEventDate(DateTime value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.LastEventSequenceGet">
            <summary>Sets the shim of AggregateRoot.get_LastEventSequence()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.LastEventSequenceSetInt32">
            <summary>Sets the shim of AggregateRoot.set_LastEventSequence(Int32 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.SystemAbstractEventSourcingIAggregateRootStateAccessorGetUncommittedChanges">
            <summary>Sets the shim of AggregateRoot.System.Abstract.EventSourcing.IAggregateRootStateAccessor.GetUncommittedChanges()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.SystemAbstractEventSourcingIAggregateRootStateAccessorLoadFromHistoryIEnumerableOfEvent">
            <summary>Sets the shim of AggregateRoot.System.Abstract.EventSourcing.IAggregateRootStateAccessor.LoadFromHistory(IEnumerable`1&lt;Event&gt; events)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRoot.AllInstances.SystemAbstractEventSourcingIAggregateRootStateAccessorMarkChangesAsCommitted">
            <summary>Sets the shim of AggregateRoot.System.Abstract.EventSourcing.IAggregateRootStateAccessor.MarkChangesAsCommitted()</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService">
            <summary>Shim type of System.Abstract.EventSourcing.AggregateRootOfflineSnapshotService</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.#ctor(System.Abstract.EventSourcing.AggregateRootOfflineSnapshotService)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.Bind(System.Abstract.EventSourcing.IAggregateRootOfflineSnapshotService)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.ConstructorIAggregateRootRepositoryIOfflineSnaphotQuery">
            <summary>Sets the shim of AggregateRootOfflineSnapshotService.AggregateRootOfflineSnapshotService(IAggregateRootRepository repository, IOfflineSnaphotQuery snaphotQuery)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.MakeSnapshotsIEnumerableOfType">
            <summary>Sets the shim of AggregateRootOfflineSnapshotService.MakeSnapshots(IEnumerable`1&lt;Type&gt; aggregateTypes)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootOfflineSnapshotService.AllInstances.MakeSnapshotsIEnumerableOfType">
            <summary>Sets the shim of AggregateRootOfflineSnapshotService.MakeSnapshots(IEnumerable`1&lt;Type&gt; aggregateTypes)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository">
            <summary>Shim type of System.Abstract.EventSourcing.AggregateRootRepository</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.#ctor(System.Abstract.EventSourcing.AggregateRootRepository)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.Bind(System.Abstract.EventSourcing.IAggregateRootRepository)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.GetByIDOf1ObjectAggregateRootQueryOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Abstract.EventSourcing.AggregateRootQueryOptions,``0})">
            <summary>Sets the shim of AggregateRootRepository.GetByID(Object aggregateID, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.GetManyByIDsOf1IEnumerableOfObjectAggregateRootQueryOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{System.Object},System.Abstract.EventSourcing.AggregateRootQueryOptions,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AggregateRootRepository.GetManyByIDs(IEnumerable`1&lt;Object&gt; aggregateIDs, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.ConstructorIEventStoreIAggregateRootSnapshotStoreActionOfIEnumerableOfEventFuncOfTypeAggregateRoot">
            <summary>Sets the shim of AggregateRootRepository.AggregateRootRepository(IEventStore eventStore, IAggregateRootSnapshotStore snapshotStore, Action`1&lt;IEnumerable`1&lt;Event&gt;&gt; eventDispatcher, Func`2&lt;Type,AggregateRoot&gt; factory)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.GetEventsByIDObject">
            <summary>Sets the shim of AggregateRootRepository.GetEventsByID(Object aggregateID)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.MakeSnapshotAggregateRootFuncOfIAggregateRootRepositoryAggregateRootBoolean">
            <summary>Sets the shim of AggregateRootRepository.MakeSnapshot(AggregateRoot aggregate, Func`3&lt;IAggregateRootRepository,AggregateRoot,Boolean&gt; predicate)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.SaveAggregateRoot">
            <summary>Sets the shim of AggregateRootRepository.Save(AggregateRoot aggregate)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.SaveIEnumerableOfAggregateRoot">
            <summary>Sets the shim of AggregateRootRepository.Save(IEnumerable`1&lt;AggregateRoot&gt; aggregates)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.AllInstances.GetByIDOf1ObjectAggregateRootQueryOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.EventSourcing.AggregateRootRepository,System.Object,System.Abstract.EventSourcing.AggregateRootQueryOptions,``0})">
            <summary>Sets the shim of AggregateRootRepository.GetByID(Object aggregateID, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.AllInstances.GetManyByIDsOf1IEnumerableOfObjectAggregateRootQueryOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.EventSourcing.AggregateRootRepository,System.Collections.Generic.IEnumerable{System.Object},System.Abstract.EventSourcing.AggregateRootQueryOptions,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AggregateRootRepository.GetManyByIDs(IEnumerable`1&lt;Object&gt; aggregateIDs, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.AllInstances.GetEventsByIDObject">
            <summary>Sets the shim of AggregateRootRepository.GetEventsByID(Object aggregateID)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.AllInstances.MakeSnapshotAggregateRootFuncOfIAggregateRootRepositoryAggregateRootBoolean">
            <summary>Sets the shim of AggregateRootRepository.MakeSnapshot(AggregateRoot aggregate, Func`3&lt;IAggregateRootRepository,AggregateRoot,Boolean&gt; predicate)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.AllInstances.SaveAggregateRoot">
            <summary>Sets the shim of AggregateRootRepository.Save(AggregateRoot aggregate)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootRepository.AllInstances.SaveIEnumerableOfAggregateRoot">
            <summary>Sets the shim of AggregateRootRepository.Save(IEnumerable`1&lt;AggregateRoot&gt; aggregates)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot">
            <summary>Shim type of System.Abstract.EventSourcing.AggregateRootSnapshot</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.#ctor(System.Abstract.EventSourcing.AggregateRootSnapshot)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.AggregateIDGet">
            <summary>Sets the shim of AggregateRootSnapshot.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.AggregateIDSetObject">
            <summary>Sets the shim of AggregateRootSnapshot.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.Constructor">
            <summary>Sets the shim of AggregateRootSnapshot.AggregateRootSnapshot()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.ConstructorAggregateRoot">
            <summary>Sets the shim of AggregateRootSnapshot.AggregateRootSnapshot(AggregateRoot aggregate)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.LastEventDateGet">
            <summary>Sets the shim of AggregateRootSnapshot.get_LastEventDate()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.LastEventDateSetDateTime">
            <summary>Sets the shim of AggregateRootSnapshot.set_LastEventDate(DateTime value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.LastEventSequenceGet">
            <summary>Sets the shim of AggregateRootSnapshot.get_LastEventSequence()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.LastEventSequenceSetInt32">
            <summary>Sets the shim of AggregateRootSnapshot.set_LastEventSequence(Int32 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.AllInstances.AggregateIDGet">
            <summary>Sets the shim of AggregateRootSnapshot.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.AllInstances.AggregateIDSetObject">
            <summary>Sets the shim of AggregateRootSnapshot.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.AllInstances.LastEventDateGet">
            <summary>Sets the shim of AggregateRootSnapshot.get_LastEventDate()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.AllInstances.LastEventDateSetDateTime">
            <summary>Sets the shim of AggregateRootSnapshot.set_LastEventDate(DateTime value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.AllInstances.LastEventSequenceGet">
            <summary>Sets the shim of AggregateRootSnapshot.get_LastEventSequence()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateRootSnapshot.AllInstances.LastEventSequenceSetInt32">
            <summary>Sets the shim of AggregateRootSnapshot.set_LastEventSequence(Int32 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1">
            <summary>Shim type of System.Abstract.EventSourcing.AggregateTuple`1</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.#ctor(System.Abstract.EventSourcing.AggregateTuple{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.AggregateIDGet">
            <summary>Sets the shim of AggregateTuple`1.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.AggregateIDSetObject">
            <summary>Sets the shim of AggregateTuple`1.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.Constructor">
            <summary>Sets the shim of AggregateTuple`1.AggregateTuple`1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.Item1Get">
            <summary>Sets the shim of AggregateTuple`1.get_Item1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.Item1SetT0">
            <summary>Sets the shim of AggregateTuple`1.set_Item1(!0 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.AllInstances.AggregateIDGet">
            <summary>Sets the shim of AggregateTuple`1.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.AllInstances.AggregateIDSetObject">
            <summary>Sets the shim of AggregateTuple`1.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.AllInstances.Item1Get">
            <summary>Sets the shim of AggregateTuple`1.get_Item1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`1.AllInstances.Item1SetT0">
            <summary>Sets the shim of AggregateTuple`1.set_Item1(!0 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2">
            <summary>Shim type of System.Abstract.EventSourcing.AggregateTuple`2</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.#ctor(System.Abstract.EventSourcing.AggregateTuple{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.AggregateIDGet">
            <summary>Sets the shim of AggregateTuple`2.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.AggregateIDSetObject">
            <summary>Sets the shim of AggregateTuple`2.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.Constructor">
            <summary>Sets the shim of AggregateTuple`2.AggregateTuple`2()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.Item1Get">
            <summary>Sets the shim of AggregateTuple`2.get_Item1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.Item1SetT0">
            <summary>Sets the shim of AggregateTuple`2.set_Item1(!0 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.Item2Get">
            <summary>Sets the shim of AggregateTuple`2.get_Item2()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.Item2SetT1">
            <summary>Sets the shim of AggregateTuple`2.set_Item2(!1 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.AllInstances.AggregateIDGet">
            <summary>Sets the shim of AggregateTuple`2.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.AllInstances.AggregateIDSetObject">
            <summary>Sets the shim of AggregateTuple`2.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.AllInstances.Item1Get">
            <summary>Sets the shim of AggregateTuple`2.get_Item1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.AllInstances.Item1SetT0">
            <summary>Sets the shim of AggregateTuple`2.set_Item1(!0 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.AllInstances.Item2Get">
            <summary>Sets the shim of AggregateTuple`2.get_Item2()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`2.AllInstances.Item2SetT1">
            <summary>Sets the shim of AggregateTuple`2.set_Item2(!1 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3">
            <summary>Shim type of System.Abstract.EventSourcing.AggregateTuple`3</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.#ctor(System.Abstract.EventSourcing.AggregateTuple{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AggregateIDGet">
            <summary>Sets the shim of AggregateTuple`3.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AggregateIDSetObject">
            <summary>Sets the shim of AggregateTuple`3.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.Constructor">
            <summary>Sets the shim of AggregateTuple`3.AggregateTuple`3()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.Item1Get">
            <summary>Sets the shim of AggregateTuple`3.get_Item1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.Item1SetT0">
            <summary>Sets the shim of AggregateTuple`3.set_Item1(!0 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.Item2Get">
            <summary>Sets the shim of AggregateTuple`3.get_Item2()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.Item2SetT1">
            <summary>Sets the shim of AggregateTuple`3.set_Item2(!1 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.Item3Get">
            <summary>Sets the shim of AggregateTuple`3.get_Item3()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.Item3SetT2">
            <summary>Sets the shim of AggregateTuple`3.set_Item3(!2 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AllInstances.AggregateIDGet">
            <summary>Sets the shim of AggregateTuple`3.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AllInstances.AggregateIDSetObject">
            <summary>Sets the shim of AggregateTuple`3.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AllInstances.Item1Get">
            <summary>Sets the shim of AggregateTuple`3.get_Item1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AllInstances.Item1SetT0">
            <summary>Sets the shim of AggregateTuple`3.set_Item1(!0 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AllInstances.Item2Get">
            <summary>Sets the shim of AggregateTuple`3.get_Item2()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AllInstances.Item2SetT1">
            <summary>Sets the shim of AggregateTuple`3.set_Item2(!1 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AllInstances.Item3Get">
            <summary>Sets the shim of AggregateTuple`3.get_Item3()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`3.AllInstances.Item3SetT2">
            <summary>Sets the shim of AggregateTuple`3.set_Item3(!2 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4">
            <summary>Shim type of System.Abstract.EventSourcing.AggregateTuple`4</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.#ctor(System.Abstract.EventSourcing.AggregateTuple{`0,`1,`2,`3})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AggregateIDGet">
            <summary>Sets the shim of AggregateTuple`4.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AggregateIDSetObject">
            <summary>Sets the shim of AggregateTuple`4.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Constructor">
            <summary>Sets the shim of AggregateTuple`4.AggregateTuple`4()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Item1Get">
            <summary>Sets the shim of AggregateTuple`4.get_Item1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Item1SetT0">
            <summary>Sets the shim of AggregateTuple`4.set_Item1(!0 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Item2Get">
            <summary>Sets the shim of AggregateTuple`4.get_Item2()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Item2SetT1">
            <summary>Sets the shim of AggregateTuple`4.set_Item2(!1 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Item3Get">
            <summary>Sets the shim of AggregateTuple`4.get_Item3()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Item3SetT2">
            <summary>Sets the shim of AggregateTuple`4.set_Item3(!2 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Item4Get">
            <summary>Sets the shim of AggregateTuple`4.get_Item4()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.Item4SetT3">
            <summary>Sets the shim of AggregateTuple`4.set_Item4(!3 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.AggregateIDGet">
            <summary>Sets the shim of AggregateTuple`4.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.AggregateIDSetObject">
            <summary>Sets the shim of AggregateTuple`4.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.Item1Get">
            <summary>Sets the shim of AggregateTuple`4.get_Item1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.Item1SetT0">
            <summary>Sets the shim of AggregateTuple`4.set_Item1(!0 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.Item2Get">
            <summary>Sets the shim of AggregateTuple`4.get_Item2()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.Item2SetT1">
            <summary>Sets the shim of AggregateTuple`4.set_Item2(!1 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.Item3Get">
            <summary>Sets the shim of AggregateTuple`4.get_Item3()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.Item3SetT2">
            <summary>Sets the shim of AggregateTuple`4.set_Item3(!2 value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.Item4Get">
            <summary>Sets the shim of AggregateTuple`4.get_Item4()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimAggregateTuple`4.AllInstances.Item4SetT3">
            <summary>Sets the shim of AggregateTuple`4.set_Item4(!3 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimEvent">
            <summary>Shim type of System.Abstract.EventSourcing.Event</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEvent.#ctor(System.Abstract.EventSourcing.Event)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEvent.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEvent.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEvent.Bind(System.Abstract.IEvent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.AggregateIDGet">
            <summary>Sets the shim of Event.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.AggregateIDSetObject">
            <summary>Sets the shim of Event.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.Constructor">
            <summary>Sets the shim of Event.Event()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.EventDateGet">
            <summary>Sets the shim of Event.get_EventDate()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.EventDateSetDateTime">
            <summary>Sets the shim of Event.set_EventDate(DateTime value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.EventSequenceGet">
            <summary>Sets the shim of Event.get_EventSequence()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.EventSequenceSetNullableOfInt32">
            <summary>Sets the shim of Event.set_EventSequence(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimEvent.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.AllInstances.AggregateIDGet">
            <summary>Sets the shim of Event.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.AllInstances.AggregateIDSetObject">
            <summary>Sets the shim of Event.set_AggregateID(Object value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.AllInstances.EventDateGet">
            <summary>Sets the shim of Event.get_EventDate()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.AllInstances.EventDateSetDateTime">
            <summary>Sets the shim of Event.set_EventDate(DateTime value)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.AllInstances.EventSequenceGet">
            <summary>Sets the shim of Event.get_EventSequence()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent.AllInstances.EventSequenceSetNullableOfInt32">
            <summary>Sets the shim of Event.set_EventSequence(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimEvent`1">
            <summary>Shim type of System.Abstract.EventSourcing.Event`1</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEvent`1.#ctor(System.Abstract.EventSourcing.Event{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEvent`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEvent`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEvent`1.Bind(System.Abstract.IEvent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent`1.Constructor">
            <summary>Sets the shim of Event`1.Event`1()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent`1.DataGet">
            <summary>Sets the shim of Event`1.get_Data()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent`1.DataSetT0">
            <summary>Sets the shim of Event`1.set_Data(!0 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimEvent`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent`1.AllInstances.DataGet">
            <summary>Sets the shim of Event`1.get_Data()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEvent`1.AllInstances.DataSetT0">
            <summary>Sets the shim of Event`1.set_Data(!0 value)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions">
            <summary>Shim type of System.Abstract.EventSourcing.EventSourcingExtensions</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions.BehaveAsOf1IAggregateRootRepository``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.EventSourcing.IAggregateRootRepository,``0})">
            <summary>Sets the shim of EventSourcingExtensions.BehaveAs(IAggregateRootRepository service)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions.GetByIDOf1IAggregateRootRepositoryObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.EventSourcing.IAggregateRootRepository,System.Object,``0})">
            <summary>Sets the shim of EventSourcingExtensions.GetByID(IAggregateRootRepository repository, Object aggregateID)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions.GetByIDIAggregateRootRepositoryTypeObjectAggregateRootQueryOptions">
            <summary>Sets the shim of EventSourcingExtensions.GetByID(IAggregateRootRepository repository, Type aggregateType, Object aggregateID, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions.GetManyByIDsIAggregateRootRepositoryIEnumerableOfObjectTypeAggregateRootQueryOptions">
            <summary>Sets the shim of EventSourcingExtensions.GetManyByIDs(IAggregateRootRepository repository, IEnumerable`1&lt;Object&gt; aggregateIDs, Type aggregateType, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.ShimEventSourcingExtensions.MakeSnapshotIAggregateRootRepositoryAggregateRoot">
            <summary>Sets the shim of EventSourcingExtensions.MakeSnapshot(IAggregateRootRepository repository, AggregateRoot aggregate)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubAggregateRoot">
            <summary>Stub type of System.Abstract.EventSourcing.AggregateRoot</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRoot.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRoot.#ctor(System.Abstract.EventSourcing.AggregateRootOptions)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRoot.InitializeStub">
            <summary>Initializes a new instance of type StubAggregateRoot</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRoot.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRoot.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRoot.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubAggregateRootOfflineSnapshotService">
            <summary>Stub type of System.Abstract.EventSourcing.AggregateRootOfflineSnapshotService</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRootOfflineSnapshotService.#ctor(System.Abstract.EventSourcing.IAggregateRootRepository,System.Abstract.EventSourcing.IOfflineSnaphotQuery)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRootOfflineSnapshotService.InitializeStub">
            <summary>Initializes a new instance of type StubAggregateRootOfflineSnapshotService</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRootOfflineSnapshotService.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRootOfflineSnapshotService.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRootOfflineSnapshotService.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubAggregateRootRepository">
            <summary>Stub type of System.Abstract.EventSourcing.AggregateRootRepository</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRootRepository.#ctor(System.Abstract.EventSourcing.IEventStore,System.Abstract.EventSourcing.IAggregateRootSnapshotStore,System.Action{System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event}},System.Func{System.Type,System.Abstract.EventSourcing.AggregateRoot})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRootRepository.InitializeStub">
            <summary>Initializes a new instance of type StubAggregateRootRepository</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRootRepository.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRootRepository.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRootRepository.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubAggregateRootSnapshot">
            <summary>Stub type of System.Abstract.EventSourcing.AggregateRootSnapshot</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRootSnapshot.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRootSnapshot.#ctor(System.Abstract.EventSourcing.AggregateRoot)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateRootSnapshot.InitializeStub">
            <summary>Initializes a new instance of type StubAggregateRootSnapshot</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRootSnapshot.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRootSnapshot.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateRootSnapshot.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`1">
            <summary>Stub type of System.Abstract.EventSourcing.AggregateTuple`1</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`1.InitializeStub">
            <summary>Initializes a new instance of type StubAggregateTuple</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`2">
            <summary>Stub type of System.Abstract.EventSourcing.AggregateTuple`2</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`2.InitializeStub">
            <summary>Initializes a new instance of type StubAggregateTuple</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`3">
            <summary>Stub type of System.Abstract.EventSourcing.AggregateTuple`3</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`3.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`3.InitializeStub">
            <summary>Initializes a new instance of type StubAggregateTuple</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`4">
            <summary>Stub type of System.Abstract.EventSourcing.AggregateTuple`4</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`4.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`4.InitializeStub">
            <summary>Initializes a new instance of type StubAggregateTuple</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`4.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`4.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubAggregateTuple`4.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubEvent">
            <summary>Stub type of System.Abstract.EventSourcing.Event</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubEvent.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubEvent.InitializeStub">
            <summary>Initializes a new instance of type StubEvent</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubEvent.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubEvent.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubEvent.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubEvent`1">
            <summary>Stub type of System.Abstract.EventSourcing.Event`1</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubEvent`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubEvent`1.InitializeStub">
            <summary>Initializes a new instance of type StubEvent</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubEvent`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubEvent`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubEvent`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIAggregateRoot">
            <summary>Stub type of System.Abstract.EventSourcing.IAggregateRoot</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRoot.#ctor">
            <summary>Initializes a new instance of type StubIAggregateRoot</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRoot.AggregateIDGet">
            <summary>Sets the stub of IAggregateRoot.get_AggregateID()</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubIAggregateRoot.sa::System#Abstract#EventSourcing#IAggregateRoot#AggregateID">
            <summary>Sets the stub of IAggregateRoot.get_AggregateID()</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIAggregateRootEventDispatcher">
            <summary>Stub type of System.Abstract.EventSourcing.IAggregateRootEventDispatcher</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootEventDispatcher.#ctor">
            <summary>Initializes a new instance of type StubIAggregateRootEventDispatcher</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootEventDispatcher.ApplyEventAggregateRootEvent">
            <summary>Sets the stub of IAggregateRootEventDispatcher.ApplyEvent(AggregateRoot aggregate, Event e)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootEventDispatcher.GetEventTypes">
            <summary>Sets the stub of IAggregateRootEventDispatcher.GetEventTypes()</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootEventDispatcher.sa::System#Abstract#EventSourcing#IAggregateRootEventDispatcher#ApplyEvent(System.Abstract.EventSourcing.AggregateRoot,System.Abstract.EventSourcing.Event)">
            <summary>Sets the stub of IAggregateRootEventDispatcher.ApplyEvent(AggregateRoot aggregate, Event e)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootEventDispatcher.sa::System#Abstract#EventSourcing#IAggregateRootEventDispatcher#GetEventTypes">
            <summary>Sets the stub of IAggregateRootEventDispatcher.GetEventTypes()</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIAggregateRootOfflineSnapshotService">
            <summary>Stub type of System.Abstract.EventSourcing.IAggregateRootOfflineSnapshotService</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootOfflineSnapshotService.#ctor">
            <summary>Initializes a new instance of type StubIAggregateRootOfflineSnapshotService</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootOfflineSnapshotService.MakeSnapshotsIEnumerableOfType">
            <summary>Sets the stub of IAggregateRootOfflineSnapshotService.MakeSnapshots(IEnumerable`1&lt;Type&gt; aggregateTypes)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootOfflineSnapshotService.sa::System#Abstract#EventSourcing#IAggregateRootOfflineSnapshotService#MakeSnapshots(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Sets the stub of IAggregateRootOfflineSnapshotService.MakeSnapshots(IEnumerable`1&lt;Type&gt; aggregateTypes)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository">
            <summary>Stub type of System.Abstract.EventSourcing.IAggregateRootRepository</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.#ctor">
            <summary>Initializes a new instance of type StubIAggregateRootRepository</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.GetByIDOf1ObjectAggregateRootQueryOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Abstract.EventSourcing.AggregateRootQueryOptions,``0})">
            <summary>Sets stubs of GetByID(Object aggregateID, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.GetEventsByIDObject">
            <summary>Sets the stub of IAggregateRootRepository.GetEventsByID(Object aggregateID)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.GetManyByIDsOf1IEnumerableOfObjectAggregateRootQueryOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{System.Object},System.Abstract.EventSourcing.AggregateRootQueryOptions,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets stubs of GetManyByIDs(IEnumerable`1&lt;Object&gt; aggregateIDs, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.MakeSnapshotAggregateRootFuncOfIAggregateRootRepositoryAggregateRootBoolean">
            <summary>Sets the stub of IAggregateRootRepository.MakeSnapshot(AggregateRoot aggregate, Func`3&lt;IAggregateRootRepository,AggregateRoot,Boolean&gt; predicate)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.SaveAggregateRoot">
            <summary>Sets the stub of IAggregateRootRepository.Save(AggregateRoot aggregate)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.SaveIEnumerableOfAggregateRoot">
            <summary>Sets the stub of IAggregateRootRepository.Save(IEnumerable`1&lt;AggregateRoot&gt; aggregate)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.sa::System#Abstract#EventSourcing#IAggregateRootRepository#GetByID``1(System.Object,System.Abstract.EventSourcing.AggregateRootQueryOptions)">
            <summary>Sets the stub of IAggregateRootRepository.GetByID(Object aggregateID, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.sa::System#Abstract#EventSourcing#IAggregateRootRepository#GetEventsByID(System.Object)">
            <summary>Sets the stub of IAggregateRootRepository.GetEventsByID(Object aggregateID)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.sa::System#Abstract#EventSourcing#IAggregateRootRepository#GetManyByIDs``1(System.Collections.Generic.IEnumerable{System.Object},System.Abstract.EventSourcing.AggregateRootQueryOptions)">
            <summary>Sets the stub of IAggregateRootRepository.GetManyByIDs(IEnumerable`1&lt;Object&gt; aggregateIDs, AggregateRootQueryOptions queryOptions)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.sa::System#Abstract#EventSourcing#IAggregateRootRepository#MakeSnapshot(System.Abstract.EventSourcing.AggregateRoot,System.Func{System.Abstract.EventSourcing.IAggregateRootRepository,System.Abstract.EventSourcing.AggregateRoot,System.Boolean})">
            <summary>Sets the stub of IAggregateRootRepository.MakeSnapshot(AggregateRoot aggregate, Func`3&lt;IAggregateRootRepository,AggregateRoot,Boolean&gt; predicate)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.sa::System#Abstract#EventSourcing#IAggregateRootRepository#Save(System.Abstract.EventSourcing.AggregateRoot)">
            <summary>Sets the stub of IAggregateRootRepository.Save(AggregateRoot aggregate)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootRepository.sa::System#Abstract#EventSourcing#IAggregateRootRepository#Save(System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateRoot})">
            <summary>Sets the stub of IAggregateRootRepository.Save(IEnumerable`1&lt;AggregateRoot&gt; aggregate)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIAggregateRootSnapshotStore">
            <summary>Stub type of System.Abstract.EventSourcing.IAggregateRootSnapshotStore</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootSnapshotStore.#ctor">
            <summary>Initializes a new instance of type StubIAggregateRootSnapshotStore</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootSnapshotStore.GetLatestSnapshotOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Abstract.EventSourcing.AggregateRootSnapshot})">
            <summary>Sets stubs of GetLatestSnapshot(Object aggregateID)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootSnapshotStore.InlineSnapshotPredicateGet">
            <summary>Sets the stub of IAggregateRootSnapshotStore.get_InlineSnapshotPredicate()</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootSnapshotStore.SaveSnapshotTypeAggregateRootSnapshot">
            <summary>Sets the stub of IAggregateRootSnapshotStore.SaveSnapshot(Type aggregateType, AggregateRootSnapshot snapshot)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootSnapshotStore.sa::System#Abstract#EventSourcing#IAggregateRootSnapshotStore#GetLatestSnapshot``1(System.Object)">
            <summary>Sets the stub of IAggregateRootSnapshotStore.GetLatestSnapshot(Object aggregateID)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootSnapshotStore.sa::System#Abstract#EventSourcing#IAggregateRootSnapshotStore#SaveSnapshot(System.Type,System.Abstract.EventSourcing.AggregateRootSnapshot)">
            <summary>Sets the stub of IAggregateRootSnapshotStore.SaveSnapshot(Type aggregateType, AggregateRootSnapshot snapshot)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubIAggregateRootSnapshotStore.sa::System#Abstract#EventSourcing#IAggregateRootSnapshotStore#InlineSnapshotPredicate">
            <summary>Sets the stub of IAggregateRootSnapshotStore.get_InlineSnapshotPredicate()</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIAggregateRootStateAccessor">
            <summary>Stub type of System.Abstract.EventSourcing.IAggregateRootStateAccessor</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootStateAccessor.#ctor">
            <summary>Initializes a new instance of type StubIAggregateRootStateAccessor</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootStateAccessor.GetUncommittedChanges">
            <summary>Sets the stub of IAggregateRootStateAccessor.GetUncommittedChanges()</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootStateAccessor.LoadFromHistoryIEnumerableOfEvent">
            <summary>Sets the stub of IAggregateRootStateAccessor.LoadFromHistory(IEnumerable`1&lt;Event&gt; events)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIAggregateRootStateAccessor.MarkChangesAsCommitted">
            <summary>Sets the stub of IAggregateRootStateAccessor.MarkChangesAsCommitted()</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootStateAccessor.sa::System#Abstract#EventSourcing#IAggregateRootStateAccessor#GetUncommittedChanges">
            <summary>Sets the stub of IAggregateRootStateAccessor.GetUncommittedChanges()</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootStateAccessor.sa::System#Abstract#EventSourcing#IAggregateRootStateAccessor#LoadFromHistory(System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event})">
            <summary>Sets the stub of IAggregateRootStateAccessor.LoadFromHistory(IEnumerable`1&lt;Event&gt; events)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIAggregateRootStateAccessor.sa::System#Abstract#EventSourcing#IAggregateRootStateAccessor#MarkChangesAsCommitted">
            <summary>Sets the stub of IAggregateRootStateAccessor.MarkChangesAsCommitted()</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore">
            <summary>Stub type of System.Abstract.EventSourcing.IBatchedAggregateRootSnapshotStore</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.#ctor">
            <summary>Initializes a new instance of type StubIBatchedAggregateRootSnapshotStore</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.GetLatestSnapshotOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Abstract.EventSourcing.AggregateRootSnapshot})">
            <summary>Sets stubs of GetLatestSnapshot(Object aggregateID)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.GetLatestSnapshotsOf1IEnumerableOfObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateTuple{System.Abstract.EventSourcing.AggregateRootSnapshot}}})">
            <summary>Sets stubs of GetLatestSnapshots(IEnumerable`1&lt;Object&gt; aggregateIDs)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.InlineSnapshotPredicateGet">
            <summary>Sets the stub of IAggregateRootSnapshotStore.get_InlineSnapshotPredicate()</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.SaveSnapshotTypeAggregateRootSnapshot">
            <summary>Sets the stub of IAggregateRootSnapshotStore.SaveSnapshot(Type aggregateType, AggregateRootSnapshot snapshot)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.SaveSnapshotsTypeIEnumerableOfAggregateRootSnapshot">
            <summary>Sets the stub of IBatchedAggregateRootSnapshotStore.SaveSnapshots(Type aggregateType, IEnumerable`1&lt;AggregateRootSnapshot&gt; snapshots)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.sa::System#Abstract#EventSourcing#IAggregateRootSnapshotStore#GetLatestSnapshot``1(System.Object)">
            <summary>Sets the stub of IAggregateRootSnapshotStore.GetLatestSnapshot(Object aggregateID)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.sa::System#Abstract#EventSourcing#IAggregateRootSnapshotStore#SaveSnapshot(System.Type,System.Abstract.EventSourcing.AggregateRootSnapshot)">
            <summary>Sets the stub of IAggregateRootSnapshotStore.SaveSnapshot(Type aggregateType, AggregateRootSnapshot snapshot)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.sa::System#Abstract#EventSourcing#IBatchedAggregateRootSnapshotStore#GetLatestSnapshots``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Sets the stub of IBatchedAggregateRootSnapshotStore.GetLatestSnapshots(IEnumerable`1&lt;Object&gt; aggregateIDs)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.sa::System#Abstract#EventSourcing#IBatchedAggregateRootSnapshotStore#SaveSnapshots(System.Type,System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateRootSnapshot})">
            <summary>Sets the stub of IBatchedAggregateRootSnapshotStore.SaveSnapshots(Type aggregateType, IEnumerable`1&lt;AggregateRootSnapshot&gt; snapshots)</summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Fakes.StubIBatchedAggregateRootSnapshotStore.sa::System#Abstract#EventSourcing#IAggregateRootSnapshotStore#InlineSnapshotPredicate">
            <summary>Sets the stub of IAggregateRootSnapshotStore.get_InlineSnapshotPredicate()</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore">
            <summary>Stub type of System.Abstract.EventSourcing.IBatchedEventStore</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore.#ctor">
            <summary>Initializes a new instance of type StubIBatchedEventStore</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore.GetEventsByIDObjectInt32">
            <summary>Sets the stub of IEventStore.GetEventsByID(Object aggregateID, Int32 startSequence)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore.GetEventsByIDsIEnumerableOfAggregateTupleOfInt32">
            <summary>Sets the stub of IBatchedEventStore.GetEventsByIDs(IEnumerable`1&lt;AggregateTuple`1&lt;Int32&gt;&gt; aggregateIDs)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore.SaveEventsIEnumerableOfAggregateTupleOfIEnumerableOfEvent">
            <summary>Sets the stub of IBatchedEventStore.SaveEvents(IEnumerable`1&lt;AggregateTuple`1&lt;IEnumerable`1&lt;Event&gt;&gt;&gt; events)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore.SaveEventsObjectIEnumerableOfEvent">
            <summary>Sets the stub of IEventStore.SaveEvents(Object aggregateID, IEnumerable`1&lt;Event&gt; events)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore.sa::System#Abstract#EventSourcing#IBatchedEventStore#GetEventsByIDs(System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateTuple{System.Int32}})">
            <summary>Sets the stub of IBatchedEventStore.GetEventsByIDs(IEnumerable`1&lt;AggregateTuple`1&lt;Int32&gt;&gt; aggregateIDs)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore.sa::System#Abstract#EventSourcing#IBatchedEventStore#SaveEvents(System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateTuple{System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event}}})">
            <summary>Sets the stub of IBatchedEventStore.SaveEvents(IEnumerable`1&lt;AggregateTuple`1&lt;IEnumerable`1&lt;Event&gt;&gt;&gt; events)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore.sa::System#Abstract#EventSourcing#IEventStore#GetEventsByID(System.Object,System.Int32)">
            <summary>Sets the stub of IEventStore.GetEventsByID(Object aggregateID, Int32 startSequence)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIBatchedEventStore.sa::System#Abstract#EventSourcing#IEventStore#SaveEvents(System.Object,System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event})">
            <summary>Sets the stub of IEventStore.SaveEvents(Object aggregateID, IEnumerable`1&lt;Event&gt; events)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubICanAggregateRootSnapshot">
            <summary>Stub type of System.Abstract.EventSourcing.ICanAggregateRootSnapshot</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubICanAggregateRootSnapshot.#ctor">
            <summary>Initializes a new instance of type StubICanAggregateRootSnapshot</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubICanAggregateRootSnapshot.GetSnapshot">
            <summary>Sets the stub of ICanAggregateRootSnapshot.GetSnapshot()</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubICanAggregateRootSnapshot.LoadSnapshotAggregateRootSnapshot">
            <summary>Sets the stub of ICanAggregateRootSnapshot.LoadSnapshot(AggregateRootSnapshot snapshot)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubICanAggregateRootSnapshot.sa::System#Abstract#EventSourcing#ICanAggregateRootSnapshot#GetSnapshot">
            <summary>Sets the stub of ICanAggregateRootSnapshot.GetSnapshot()</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubICanAggregateRootSnapshot.sa::System#Abstract#EventSourcing#ICanAggregateRootSnapshot#LoadSnapshot(System.Abstract.EventSourcing.AggregateRootSnapshot)">
            <summary>Sets the stub of ICanAggregateRootSnapshot.LoadSnapshot(AggregateRootSnapshot snapshot)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIEventStore">
            <summary>Stub type of System.Abstract.EventSourcing.IEventStore</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIEventStore.#ctor">
            <summary>Initializes a new instance of type StubIEventStore</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIEventStore.GetEventsByIDObjectInt32">
            <summary>Sets the stub of IEventStore.GetEventsByID(Object aggregateID, Int32 startSequence)</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIEventStore.SaveEventsObjectIEnumerableOfEvent">
            <summary>Sets the stub of IEventStore.SaveEvents(Object aggregateID, IEnumerable`1&lt;Event&gt; events)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIEventStore.sa::System#Abstract#EventSourcing#IEventStore#GetEventsByID(System.Object,System.Int32)">
            <summary>Sets the stub of IEventStore.GetEventsByID(Object aggregateID, Int32 startSequence)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIEventStore.sa::System#Abstract#EventSourcing#IEventStore#SaveEvents(System.Object,System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event})">
            <summary>Sets the stub of IEventStore.SaveEvents(Object aggregateID, IEnumerable`1&lt;Event&gt; events)</summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Fakes.StubIOfflineSnaphotQuery">
            <summary>Stub type of System.Abstract.EventSourcing.IOfflineSnaphotQuery</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIOfflineSnaphotQuery.#ctor">
            <summary>Initializes a new instance of type StubIOfflineSnaphotQuery</summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.Fakes.StubIOfflineSnaphotQuery.GetAggregatesToSnapshotIEnumerableOfType">
            <summary>Sets the stub of IOfflineSnaphotQuery.GetAggregatesToSnapshot(IEnumerable`1&lt;Type&gt; aggregateTypes)</summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.Fakes.StubIOfflineSnaphotQuery.sa::System#Abstract#EventSourcing#IOfflineSnaphotQuery#GetAggregatesToSnapshot(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Sets the stub of IOfflineSnaphotQuery.GetAggregatesToSnapshot(IEnumerable`1&lt;Type&gt; aggregateTypes)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimAbstractExtensions">
            <summary>Shim type of System.Abstract.AbstractExtensions</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.AddMessageHandlersByScanOf1IServiceBus``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Abstract.IServiceBus})">
            <summary>Sets the shim of AbstractExtensions.AddMessageHandlersByScan(IServiceBus bus)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsOf1IServiceBus``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceBus,``0})">
            <summary>Sets the shim of AbstractExtensions.BehaveAs(IServiceBus service)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsOf1IServiceCache``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,``0})">
            <summary>Sets the shim of AbstractExtensions.BehaveAs(IServiceCache service)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsOf1IServiceLocator``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceLocator,``0})">
            <summary>Sets the shim of AbstractExtensions.BehaveAs(IServiceLocator service)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsOf1IServiceLog``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceLog,``0})">
            <summary>Sets the shim of AbstractExtensions.BehaveAs(IServiceLog service)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsOf1IServiceMap``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceMap,``0})">
            <summary>Sets the shim of AbstractExtensions.BehaveAs(IServiceMap service)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.DesBase64Of1ISerDesTypeString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ISerDes,System.Type,System.String,``0})">
            <summary>Sets the shim of AbstractExtensions.DesBase64(ISerDes serDes, Type type, String text)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.DesOf1ISerDesTypeString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ISerDes,System.Type,System.String,``0})">
            <summary>Sets the shim of AbstractExtensions.Des(ISerDes serDes, Type type, String text)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.DesOf1ISerDesTypeStringEncoding``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ISerDes,System.Type,System.String,System.Text.Encoding,``0})">
            <summary>Sets the shim of AbstractExtensions.Des(ISerDes serDes, Type type, String text, Encoding encoding)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetManyOf1IServiceCacheIServiceCacheRegistrationObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.GetMany(IServiceCache service, IServiceCacheRegistration registration, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetManyOf1IServiceCacheIServiceCacheRegistrationObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.GetMany(IServiceCache service, IServiceCacheRegistration registration, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetManyOf1IServiceCacheTypeStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.GetMany(IServiceCache cache, Type anchorType, String registrationName, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetManyOf1IServiceCacheTypeStringObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.GetMany(IServiceCache cache, Type anchorType, String registrationName, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetManyOf2IServiceCacheIServiceCacheRegistrationObjectArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[],System.Collections.Generic.IDictionary{``0,``1}})">
            <summary>Sets the shim of AbstractExtensions.GetMany(IServiceCache service, IServiceCacheRegistration registration, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetManyOf2IServiceCacheIServiceCacheRegistrationObjectObjectArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[],System.Collections.Generic.IDictionary{``0,``1}})">
            <summary>Sets the shim of AbstractExtensions.GetMany(IServiceCache service, IServiceCacheRegistration registration, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetManyOf2IServiceCacheTypeStringObjectArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object[],System.Collections.Generic.IDictionary{``0,``1}})">
            <summary>Sets the shim of AbstractExtensions.GetMany(IServiceCache cache, Type anchorType, String registrationName, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetManyOf2IServiceCacheTypeStringObjectObjectArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[],System.Collections.Generic.IDictionary{``0,``1}})">
            <summary>Sets the shim of AbstractExtensions.GetMany(IServiceCache cache, Type anchorType, String registrationName, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetOf1IServiceCacheIServiceCacheRegistrationObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[],``0})">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache service, IServiceCacheRegistration registration, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetOf1IServiceCacheIServiceCacheRegistrationObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[],``0})">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache service, IServiceCacheRegistration registration, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetOf1IServiceCacheTypeStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object[],``0})">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache cache, Type anchorType, String registrationName, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetOf1IServiceCacheTypeStringObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[],``0})">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache cache, Type anchorType, String registrationName, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetOf1IServiceLog``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceLog,System.Abstract.IServiceLog})">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceLog service)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetQueryOf1IServiceCacheIServiceCacheRegistrationObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of AbstractExtensions.GetQuery(IServiceCache service, IServiceCacheRegistration registration, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetQueryOf1IServiceCacheServiceCacheRegistrationObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.ServiceCacheRegistration,System.Object,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of AbstractExtensions.GetQuery(IServiceCache service, ServiceCacheRegistration registration, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetQueryOf1IServiceCacheTypeStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of AbstractExtensions.GetQuery(IServiceCache cache, Type anchorType, String registrationName, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetQueryOf1IServiceCacheTypeStringObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of AbstractExtensions.GetQuery(IServiceCache cache, Type anchorType, String registrationName, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.GetServiceLocatorOf1IServiceLocator``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceLocator,``0})">
            <summary>Sets the shim of AbstractExtensions.GetServiceLocator(IServiceLocator locator)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.PublishOf1IPublishingServiceBusActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Abstract.IPublishingServiceBus,System.Action{``0}})">
            <summary>Sets the shim of AbstractExtensions.Publish(IPublishingServiceBus serviceBus, Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.QueryAllOf1IServiceCacheTypeObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.QueryAll(IServiceCache service, Type anchorType, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.QueryAllOf1IServiceCacheTypeObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.Object,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.QueryAll(IServiceCache service, Type anchorType, Object tag, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.QueryAllOf2IServiceCacheObjectArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Object[],System.Collections.Generic.IEnumerable{``1}})">
            <summary>Sets the shim of AbstractExtensions.QueryAll(IServiceCache service, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.QueryAllOf2IServiceCacheObjectObjectArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Object,System.Object[],System.Collections.Generic.IEnumerable{``1}})">
            <summary>Sets the shim of AbstractExtensions.QueryAll(IServiceCache service, Object tag, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.QueryOf1IServiceCacheIServiceCacheRegistrationObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.Query(IServiceCache service, IServiceCacheRegistration registration, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.QueryOf1IServiceCacheIServiceCacheRegistrationObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.Query(IServiceCache service, IServiceCacheRegistration registration, Object tag, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.QueryOf1IServiceCacheTypeStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.Query(IServiceCache service, Type anchorType, String registrationName, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.QueryOf1IServiceCacheTypeStringObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.Query(IServiceCache service, Type anchorType, String registrationName, Object tag, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByTypeMatchOf1IServiceRegistrarAssemblyArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Abstract.IServiceRegistrar,System.Reflection.Assembly[]})">
            <summary>Sets the shim of AbstractExtensions.RegisterByTypeMatch(IServiceRegistrar registrar, Assembly[] assemblies)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByTypeMatchOf1IServiceRegistrarPredicateOfTypeAssemblyArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Abstract.IServiceRegistrar,System.Predicate{System.Type},System.Reflection.Assembly[]})">
            <summary>Sets the shim of AbstractExtensions.RegisterByTypeMatch(IServiceRegistrar registrar, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByTypeMatchOf1LazyOfIServiceLocatorAssemblyArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceLocator},System.Reflection.Assembly[],System.Lazy{System.Abstract.IServiceLocator}})">
            <summary>Sets the shim of AbstractExtensions.RegisterByTypeMatch(Lazy`1&lt;IServiceLocator&gt; service, Assembly[] assemblies)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByTypeMatchOf1LazyOfIServiceLocatorPredicateOfTypeAssemblyArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceLocator},System.Predicate{System.Type},System.Reflection.Assembly[],System.Lazy{System.Abstract.IServiceLocator}})">
            <summary>Sets the shim of AbstractExtensions.RegisterByTypeMatch(Lazy`1&lt;IServiceLocator&gt; service, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceBusIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceBus},System.Abstract.IServiceLocator,System.String,System.Lazy{System.Abstract.IServiceBus}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceBus&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceBusLazyOfIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceBus},System.Lazy{System.Abstract.IServiceLocator},System.String,System.Lazy{System.Abstract.IServiceBus}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceBus&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceBusString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceBus},System.String,System.Lazy{System.Abstract.IServiceBus}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceBus&gt; service, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceCacheIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceCache},System.Abstract.IServiceLocator,System.String,System.Lazy{System.Abstract.IServiceCache}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceCache&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceCacheLazyOfIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceCache},System.Lazy{System.Abstract.IServiceLocator},System.String,System.Lazy{System.Abstract.IServiceCache}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceCache&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceCacheString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceCache},System.String,System.Lazy{System.Abstract.IServiceCache}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceCache&gt; service, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceLocatorIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceLocator},System.Abstract.IServiceLocator,System.String,System.Lazy{System.Abstract.IServiceLocator}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLocator&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceLocatorLazyOfIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceLocator},System.Lazy{System.Abstract.IServiceLocator},System.String,System.Lazy{System.Abstract.IServiceLocator}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLocator&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceLocator},System.String,System.Lazy{System.Abstract.IServiceLocator}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLocator&gt; service, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceLogIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceLog},System.Abstract.IServiceLocator,System.String,System.Lazy{System.Abstract.IServiceLog}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLog&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceLogLazyOfIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceLog},System.Lazy{System.Abstract.IServiceLocator},System.String,System.Lazy{System.Abstract.IServiceLog}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLog&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceLogString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceLog},System.String,System.Lazy{System.Abstract.IServiceLog}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLog&gt; service, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceMapIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceMap},System.Abstract.IServiceLocator,System.String,System.Lazy{System.Abstract.IServiceMap}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceMap&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceMapLazyOfIServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceMap},System.Lazy{System.Abstract.IServiceLocator},System.String,System.Lazy{System.Abstract.IServiceMap}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceMap&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorOf1LazyOfIServiceMapString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Lazy{System.Abstract.IServiceMap},System.String,System.Lazy{System.Abstract.IServiceMap}})">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceMap&gt; service, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.ReplyOf1IServiceBusActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Abstract.IServiceBus,System.Action{``0}})">
            <summary>Sets the shim of AbstractExtensions.Reply(IServiceBus serviceBus, Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.ResolveAllOf1IServiceLocatorType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceLocator,System.Type,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of AbstractExtensions.ResolveAll(IServiceLocator locator, Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.ResolveOf1IServiceLocatorType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceLocator,System.Type,``0})">
            <summary>Sets the shim of AbstractExtensions.Resolve(IServiceLocator locator, Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.ResolveOf1IServiceLocatorTypeString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceLocator,System.Type,System.String,``0})">
            <summary>Sets the shim of AbstractExtensions.Resolve(IServiceLocator locator, Type serviceType, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.SendAllOf1IServiceCacheObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Abstract.IServiceCache,System.Object[]})">
            <summary>Sets the shim of AbstractExtensions.SendAll(IServiceCache service, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.SendAllOf1IServiceCacheObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Abstract.IServiceCache,System.Object,System.Object[]})">
            <summary>Sets the shim of AbstractExtensions.SendAll(IServiceCache service, Object tag, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.SendOf1IServiceBusActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceBus,System.Action{``0},System.Abstract.IServiceBusCallback})">
            <summary>Sets the shim of AbstractExtensions.Send(IServiceBus serviceBus, Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.SendOf1IServiceBusIServiceBusEndpointActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceBus,System.Abstract.IServiceBusEndpoint,System.Action{``0},System.Abstract.IServiceBusCallback})">
            <summary>Sets the shim of AbstractExtensions.Send(IServiceBus serviceBus, IServiceBusEndpoint destination, Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.SendOf1IServiceBusStringActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceBus,System.String,System.Action{``0},System.Abstract.IServiceBusCallback})">
            <summary>Sets the shim of AbstractExtensions.Send(IServiceBus serviceBus, String destination, Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.SerBase64Of1ISerDesTypeM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ISerDes,System.Type,``0,System.String})">
            <summary>Sets the shim of AbstractExtensions.SerBase64(ISerDes serDes, Type type, !!0 graph)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.SerOf1ISerDesTypeM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ISerDes,System.Type,``0,System.String})">
            <summary>Sets the shim of AbstractExtensions.Ser(ISerDes serDes, Type type, !!0 graph)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.SerOf1ISerDesTypeM0Encoding``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ISerDes,System.Type,``0,System.Text.Encoding,System.String})">
            <summary>Sets the shim of AbstractExtensions.Ser(ISerDes serDes, Type type, !!0 graph, Encoding encoding)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.SubscribeOf1IPublishingServiceBusPredicateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Abstract.IPublishingServiceBus,System.Predicate{``0}})">
            <summary>Sets the shim of AbstractExtensions.Subscribe(IPublishingServiceBus serviceBus, Predicate`1&lt;!!0&gt; condition)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractExtensions.UnsubscribeOf1IPublishingServiceBus``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Abstract.IPublishingServiceBus})">
            <summary>Sets the shim of AbstractExtensions.Unsubscribe(IPublishingServiceBus serviceBus)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddEndpointLazyOfIServiceBusString">
            <summary>Sets the shim of AbstractExtensions.AddEndpoint(Lazy`1&lt;IServiceBus&gt; service, String endpoint)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddIServiceCacheObjectStringCacheItemPolicyObject">
            <summary>Sets the shim of AbstractExtensions.Add(IServiceCache service, Object tag, String name, CacheItemPolicy itemPolicy, Object value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddIServiceCacheObjectStringObject">
            <summary>Sets the shim of AbstractExtensions.Add(IServiceCache service, Object tag, String name, Object value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddIServiceCacheStringCacheItemPolicyObject">
            <summary>Sets the shim of AbstractExtensions.Add(IServiceCache service, String name, CacheItemPolicy itemPolicy, Object value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddIServiceCacheStringObject">
            <summary>Sets the shim of AbstractExtensions.Add(IServiceCache service, String name, Object value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddMessageHandlerIServiceBusType">
            <summary>Sets the shim of AbstractExtensions.AddMessageHandler(IServiceBus bus, Type handlerType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddMessageHandlerLazyOfIServiceBusType">
            <summary>Sets the shim of AbstractExtensions.AddMessageHandler(Lazy`1&lt;IServiceBus&gt; service, Type handlerType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddMessageHandlersByScanIServiceBusPredicateOfTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.AddMessageHandlersByScan(IServiceBus bus, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddMessageHandlersByScanIServiceBusType">
            <summary>Sets the shim of AbstractExtensions.AddMessageHandlersByScan(IServiceBus bus, Type handlerType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddMessageHandlersByScanLazyOfIServiceBusAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.AddMessageHandlersByScan(Lazy`1&lt;IServiceBus&gt; service, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.AddMessageHandlersByScanLazyOfIServiceBusPredicateOfTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.AddMessageHandlersByScan(Lazy`1&lt;IServiceBus&gt; service, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsIServiceCacheIEnumerableOfObjectStringOut">
            <summary>Sets the shim of AbstractExtensions.BehaveAs(IServiceCache service, IEnumerable`1&lt;Object&gt; values, String&amp; namespace)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsIServiceCacheString">
            <summary>Sets the shim of AbstractExtensions.BehaveAs(IServiceCache service, String namespace)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.BehaveAs(IServiceLocator locator, String namespace)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.BehaveAsIServiceRegistrarServiceRegistrarLifetime">
            <summary>Sets the shim of AbstractExtensions.BehaveAs(IServiceRegistrar registrar, ServiceRegistrarLifetime lifetime)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.DebugFormatIServiceLogExceptionStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.DebugFormat(IServiceLog service, Exception ex, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.DebugFormatIServiceLogStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.DebugFormat(IServiceLog service, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.DebugIServiceLogException">
            <summary>Sets the shim of AbstractExtensions.Debug(IServiceLog service, Exception ex)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.DebugIServiceLogExceptionString">
            <summary>Sets the shim of AbstractExtensions.Debug(IServiceLog service, Exception ex, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.DebugIServiceLogString">
            <summary>Sets the shim of AbstractExtensions.Debug(IServiceLog service, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.EnsureCacheDependencyIServiceCacheIEnumerableOfString">
            <summary>Sets the shim of AbstractExtensions.EnsureCacheDependency(IServiceCache service, IEnumerable`1&lt;String&gt; names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.EnsureCacheDependencyIServiceCacheObjectCacheItemDependency">
            <summary>Sets the shim of AbstractExtensions.EnsureCacheDependency(IServiceCache service, Object tag, CacheItemDependency dependency)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.ErrorFormatIServiceLogExceptionStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.ErrorFormat(IServiceLog service, Exception ex, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.ErrorFormatIServiceLogStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.ErrorFormat(IServiceLog service, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.ErrorIServiceLogException">
            <summary>Sets the shim of AbstractExtensions.Error(IServiceLog service, Exception ex)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.ErrorIServiceLogExceptionString">
            <summary>Sets the shim of AbstractExtensions.Error(IServiceLog service, Exception ex, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.ErrorIServiceLogString">
            <summary>Sets the shim of AbstractExtensions.Error(IServiceLog service, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.FatalFormatIServiceLogExceptionStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.FatalFormat(IServiceLog service, Exception ex, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.FatalFormatIServiceLogStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.FatalFormat(IServiceLog service, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.FatalIServiceLogException">
            <summary>Sets the shim of AbstractExtensions.Fatal(IServiceLog service, Exception ex)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.FatalIServiceLogExceptionString">
            <summary>Sets the shim of AbstractExtensions.Fatal(IServiceLog service, Exception ex, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.FatalIServiceLogString">
            <summary>Sets the shim of AbstractExtensions.Fatal(IServiceLog service, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.GetIServiceCacheIEnumerableOfString">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache service, IEnumerable`1&lt;String&gt; names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.GetIServiceCacheIServiceCacheRegistrationObjectArray">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache service, IServiceCacheRegistration registration, Object[] values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.GetIServiceCacheIServiceCacheRegistrationObjectObjectArray">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache service, IServiceCacheRegistration registration, Object tag, Object[] values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.GetIServiceCacheString">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache service, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.GetIServiceCacheTypeStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache cache, Type anchorType, String registrationName, Object[] values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.GetIServiceCacheTypeStringObjectObjectArray">
            <summary>Sets the shim of AbstractExtensions.Get(IServiceCache cache, Type anchorType, String registrationName, Object tag, Object[] values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.GetMessageTypeFromHandlerType">
            <summary>Sets the shim of AbstractExtensions.GetMessageTypeFromHandler(Type messageHandlerType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.GetRegistrationDispatcherIServiceCache">
            <summary>Sets the shim of AbstractExtensions.GetRegistrationDispatcher(IServiceCache cache)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.InformationFormatIServiceLogExceptionStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.InformationFormat(IServiceLog service, Exception ex, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.InformationFormatIServiceLogStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.InformationFormat(IServiceLog service, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.InformationIServiceLogException">
            <summary>Sets the shim of AbstractExtensions.Information(IServiceLog service, Exception ex)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.InformationIServiceLogExceptionString">
            <summary>Sets the shim of AbstractExtensions.Information(IServiceLog service, Exception ex, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.InformationIServiceLogString">
            <summary>Sets the shim of AbstractExtensions.Information(IServiceLog service, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.MakeDependencyIServiceCacheStringArray">
            <summary>Sets the shim of AbstractExtensions.MakeDependency(IServiceCache service, String[] names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByIServiceRegistrationIServiceRegistrarAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByIServiceRegistration(IServiceRegistrar registrar, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByIServiceRegistrationIServiceRegistrarPredicateOfTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByIServiceRegistration(IServiceRegistrar registrar, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByIServiceRegistrationLazyOfIServiceLocatorAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByIServiceRegistration(Lazy`1&lt;IServiceLocator&gt; service, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByIServiceRegistrationLazyOfIServiceLocatorPredicateOfTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByIServiceRegistration(Lazy`1&lt;IServiceLocator&gt; service, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByNamingConventionActionOfTypeTypePredicateOfTypeIEnumerableOfAssembly">
            <summary>Sets the shim of AbstractExtensions.RegisterByNamingConvention(Action`2&lt;Type,Type&gt; action, Predicate`1&lt;Type&gt; predicate, IEnumerable`1&lt;Assembly&gt; assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByNamingConventionIServiceRegistrarAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByNamingConvention(IServiceRegistrar registrar, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByNamingConventionIServiceRegistrarPredicateOfTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByNamingConvention(IServiceRegistrar registrar, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByNamingConventionLazyOfIServiceLocatorAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByNamingConvention(Lazy`1&lt;IServiceLocator&gt; service, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByNamingConventionLazyOfIServiceLocatorPredicateOfTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByNamingConvention(Lazy`1&lt;IServiceLocator&gt; service, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByTypeMatchActionOfTypeTypeStringTypePredicateOfTypeIEnumerableOfAssembly">
            <summary>Sets the shim of AbstractExtensions.RegisterByTypeMatch(Action`3&lt;Type,Type,String&gt; action, Type basedOnType, Predicate`1&lt;Type&gt; predicate, IEnumerable`1&lt;Assembly&gt; assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByTypeMatchIServiceRegistrarTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByTypeMatch(IServiceRegistrar registrar, Type basedOnType, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByTypeMatchIServiceRegistrarTypePredicateOfTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByTypeMatch(IServiceRegistrar registrar, Type basedOnType, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByTypeMatchLazyOfIServiceLocatorTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByTypeMatch(Lazy`1&lt;IServiceLocator&gt; service, Type basedOnType, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterByTypeMatchLazyOfIServiceLocatorTypePredicateOfTypeAssemblyArray">
            <summary>Sets the shim of AbstractExtensions.RegisterByTypeMatch(Lazy`1&lt;IServiceLocator&gt; service, Type basedOnType, Predicate`1&lt;Type&gt; predicate, Assembly[] assemblies)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterLazyOfIServiceLocatorActionOfIServiceRegistrar">
            <summary>Sets the shim of AbstractExtensions.Register(Lazy`1&lt;IServiceLocator&gt; service, Action`1&lt;IServiceRegistrar&gt; registrant)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceBusIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceBus&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceBusLazyOfIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceBus&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceBusString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceBus&gt; service, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceCacheIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceCache&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceCacheLazyOfIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceCache&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceCacheString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceCache&gt; service, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceLocatorIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLocator&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceLocatorLazyOfIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLocator&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLocator&gt; service, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceLogIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLog&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceLogLazyOfIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLog&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceLogString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceLog&gt; service, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceMapIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceMap&gt; service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceMapLazyOfIServiceLocatorString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceMap&gt; service, Lazy`1&lt;IServiceLocator&gt; locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RegisterWithServiceLocatorLazyOfIServiceMapString">
            <summary>Sets the shim of AbstractExtensions.RegisterWithServiceLocator(Lazy`1&lt;IServiceMap&gt; service, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RemoveAllIServiceCacheType">
            <summary>Sets the shim of AbstractExtensions.RemoveAll(IServiceCache cache, Type anchorType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RemoveIServiceCacheObjectString">
            <summary>Sets the shim of AbstractExtensions.Remove(IServiceCache service, Object tag, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RemoveIServiceCacheServiceCacheRegistration">
            <summary>Sets the shim of AbstractExtensions.Remove(IServiceCache cache, ServiceCacheRegistration registration)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RemoveIServiceCacheString">
            <summary>Sets the shim of AbstractExtensions.Remove(IServiceCache service, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.RemoveIServiceCacheTypeString">
            <summary>Sets the shim of AbstractExtensions.Remove(IServiceCache cache, Type anchorType, String registrationName)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SendAllIServiceCacheTypeObjectArray">
            <summary>Sets the shim of AbstractExtensions.SendAll(IServiceCache service, Type anchorType, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SendAllIServiceCacheTypeObjectObjectArray">
            <summary>Sets the shim of AbstractExtensions.SendAll(IServiceCache service, Type anchorType, Object tag, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SendIServiceBusObjectArray">
            <summary>Sets the shim of AbstractExtensions.Send(IServiceBus serviceBus, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SendIServiceBusStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.Send(IServiceBus serviceBus, String destination, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SendIServiceCacheIServiceCacheRegistrationObjectArray">
            <summary>Sets the shim of AbstractExtensions.Send(IServiceCache service, IServiceCacheRegistration registration, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SendIServiceCacheIServiceCacheRegistrationObjectObjectArray">
            <summary>Sets the shim of AbstractExtensions.Send(IServiceCache service, IServiceCacheRegistration registration, Object tag, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SendIServiceCacheTypeStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.Send(IServiceCache service, Type anchorType, String registrationName, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SendIServiceCacheTypeStringObjectObjectArray">
            <summary>Sets the shim of AbstractExtensions.Send(IServiceCache service, Type anchorType, String registrationName, Object tag, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SetIServiceCacheObjectStringCacheItemPolicyObject">
            <summary>Sets the shim of AbstractExtensions.Set(IServiceCache service, Object tag, String name, CacheItemPolicy itemPolicy, Object value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SetIServiceCacheObjectStringObject">
            <summary>Sets the shim of AbstractExtensions.Set(IServiceCache service, Object tag, String name, Object value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SetIServiceCacheStringCacheItemPolicyObject">
            <summary>Sets the shim of AbstractExtensions.Set(IServiceCache service, String name, CacheItemPolicy itemPolicy, Object value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SetIServiceCacheStringObject">
            <summary>Sets the shim of AbstractExtensions.Set(IServiceCache service, String name, Object value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.StaticConstructor">
            <summary>Sets the shim of AbstractExtensions.AbstractExtensions()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.SubscribeIPublishingServiceBusType">
            <summary>Sets the shim of AbstractExtensions.Subscribe(IPublishingServiceBus serviceBus, Type messageType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.TouchIServiceCacheObjectStringArray">
            <summary>Sets the shim of AbstractExtensions.Touch(IServiceCache service, Object tag, String[] names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.TouchIServiceCacheStringArray">
            <summary>Sets the shim of AbstractExtensions.Touch(IServiceCache service, String[] names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.TryGetIServiceCacheStringObjectOut">
            <summary>Sets the shim of AbstractExtensions.TryGet(IServiceCache service, String name, Object&amp; value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.WarningFormatIServiceLogExceptionStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.WarningFormat(IServiceLog service, Exception ex, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.WarningFormatIServiceLogStringObjectArray">
            <summary>Sets the shim of AbstractExtensions.WarningFormat(IServiceLog service, String format, Object[] args)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.WarningIServiceLogException">
            <summary>Sets the shim of AbstractExtensions.Warning(IServiceLog service, Exception ex)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.WarningIServiceLogExceptionString">
            <summary>Sets the shim of AbstractExtensions.Warning(IServiceLog service, Exception ex, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions.WarningIServiceLogString">
            <summary>Sets the shim of AbstractExtensions.Warning(IServiceLog service, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions._RegisterByIServiceRegistrationb__3cType">
            <summary>Sets the shim of AbstractExtensions.&lt;RegisterByIServiceRegistration&gt;b__3c(Type t)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractExtensions._cctorb__71IServiceRegistrarType">
            <summary>Sets the shim of AbstractExtensions.&lt;.cctor&gt;b__71(IServiceRegistrar r, Type t)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem">
            <summary>Shim type of System.Abstract.AbstractFileTouchableCacheItem</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.#ctor(System.Abstract.AbstractFileTouchableCacheItem)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.Bind(System.Abstract.ITouchableCacheItem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.CanTouchObjectStringRef">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.CanTouch(Object tag, String&amp; name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.ConstructorIServiceCacheITouchableCacheItem">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.AbstractFileTouchableCacheItem(IServiceCache parent, ITouchableCacheItem base)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.DirectoryGet">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.get_Directory()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.DirectorySetString">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.set_Directory(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.EnsureKeysExistObjectStringArrayStringArrayOut">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.EnsureKeysExist(Object tag, String[] names, String[]&amp; newNames)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.GetFilePathForNameString">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.GetFilePathForName(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.MakeDependencyObjectStringArray">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.MakeDependency(Object tag, String[] names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.StaticConstructor">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.AbstractFileTouchableCacheItem()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.TouchObjectStringArray">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.Touch(Object tag, String[] names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.WriteBodyForNameStringString">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.WriteBodyForName(String name, String path)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.AllInstances.CanTouchObjectStringRef">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.CanTouch(Object tag, String&amp; name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.AllInstances.DirectoryGet">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.get_Directory()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.AllInstances.DirectorySetString">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.set_Directory(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.AllInstances.EnsureKeysExistObjectStringArrayStringArrayOut">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.EnsureKeysExist(Object tag, String[] names, String[]&amp; newNames)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.AllInstances.GetFilePathForNameString">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.GetFilePathForName(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.AllInstances.MakeDependencyObjectStringArray">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.MakeDependency(Object tag, String[] names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.AllInstances.TouchObjectStringArray">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.Touch(Object tag, String[] names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimAbstractFileTouchableCacheItem.AllInstances.WriteBodyForNameStringString">
            <summary>Sets the shim of AbstractFileTouchableCacheItem.WriteBodyForName(String name, String path)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimCacheItemHeader">
            <summary>Shim type of System.Abstract.CacheItemHeader</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimCacheItemHeader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimCacheItemHeader.#ctor(System.Abstract.CacheItemHeader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimCacheItemHeader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimCacheItemHeader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.Constructor">
            <summary>Sets the shim of CacheItemHeader.CacheItemHeader()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.ItemGet">
            <summary>Sets the shim of CacheItemHeader.get_Item()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.ItemSetString">
            <summary>Sets the shim of CacheItemHeader.set_Item(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.ValuesGet">
            <summary>Sets the shim of CacheItemHeader.get_Values()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.ValuesSetObjectArray">
            <summary>Sets the shim of CacheItemHeader.set_Values(Object[] value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimCacheItemHeader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.AllInstances.ItemGet">
            <summary>Sets the shim of CacheItemHeader.get_Item()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.AllInstances.ItemSetString">
            <summary>Sets the shim of CacheItemHeader.set_Item(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.AllInstances.ValuesGet">
            <summary>Sets the shim of CacheItemHeader.get_Values()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemHeader.AllInstances.ValuesSetObjectArray">
            <summary>Sets the shim of CacheItemHeader.set_Values(Object[] value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimCacheItemPolicy">
            <summary>Shim type of System.Abstract.CacheItemPolicy</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimCacheItemPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimCacheItemPolicy.#ctor(System.Abstract.CacheItemPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimCacheItemPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimCacheItemPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AbsoluteExpirationGet">
            <summary>Sets the shim of CacheItemPolicy.get_AbsoluteExpiration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AbsoluteExpirationSetDateTime">
            <summary>Sets the shim of CacheItemPolicy.set_AbsoluteExpiration(DateTime value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.Constructor">
            <summary>Sets the shim of CacheItemPolicy.CacheItemPolicy()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.ConstructorInt32">
            <summary>Sets the shim of CacheItemPolicy.CacheItemPolicy(Int32 floatingAbsoluteMinuteTimeout)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.DependencyGet">
            <summary>Sets the shim of CacheItemPolicy.get_Dependency()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.DependencySetCacheItemDependency">
            <summary>Sets the shim of CacheItemPolicy.set_Dependency(CacheItemDependency value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.FloatingAbsoluteExpirationGet">
            <summary>Sets the shim of CacheItemPolicy.get_FloatingAbsoluteExpiration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.FloatingAbsoluteExpirationSetTimeSpan">
            <summary>Sets the shim of CacheItemPolicy.set_FloatingAbsoluteExpiration(TimeSpan value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.PriorityGet">
            <summary>Sets the shim of CacheItemPolicy.get_Priority()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.PrioritySetCacheItemPriority">
            <summary>Sets the shim of CacheItemPolicy.set_Priority(CacheItemPriority value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.RemovedCallbackGet">
            <summary>Sets the shim of CacheItemPolicy.get_RemovedCallback()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.RemovedCallbackSetCacheEntryRemovedCallback">
            <summary>Sets the shim of CacheItemPolicy.set_RemovedCallback(CacheEntryRemovedCallback value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.SlidingExpirationGet">
            <summary>Sets the shim of CacheItemPolicy.get_SlidingExpiration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.SlidingExpirationSetTimeSpan">
            <summary>Sets the shim of CacheItemPolicy.set_SlidingExpiration(TimeSpan value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.StaticConstructor">
            <summary>Sets the shim of CacheItemPolicy.CacheItemPolicy()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.UpdateCallbackGet">
            <summary>Sets the shim of CacheItemPolicy.get_UpdateCallback()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.UpdateCallbackSetCacheEntryUpdateCallback">
            <summary>Sets the shim of CacheItemPolicy.set_UpdateCallback(CacheEntryUpdateCallback value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.AbsoluteExpirationGet">
            <summary>Sets the shim of CacheItemPolicy.get_AbsoluteExpiration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.AbsoluteExpirationSetDateTime">
            <summary>Sets the shim of CacheItemPolicy.set_AbsoluteExpiration(DateTime value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.DependencyGet">
            <summary>Sets the shim of CacheItemPolicy.get_Dependency()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.DependencySetCacheItemDependency">
            <summary>Sets the shim of CacheItemPolicy.set_Dependency(CacheItemDependency value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.FloatingAbsoluteExpirationGet">
            <summary>Sets the shim of CacheItemPolicy.get_FloatingAbsoluteExpiration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.FloatingAbsoluteExpirationSetTimeSpan">
            <summary>Sets the shim of CacheItemPolicy.set_FloatingAbsoluteExpiration(TimeSpan value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.PriorityGet">
            <summary>Sets the shim of CacheItemPolicy.get_Priority()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.PrioritySetCacheItemPriority">
            <summary>Sets the shim of CacheItemPolicy.set_Priority(CacheItemPriority value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.RemovedCallbackGet">
            <summary>Sets the shim of CacheItemPolicy.get_RemovedCallback()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.RemovedCallbackSetCacheEntryRemovedCallback">
            <summary>Sets the shim of CacheItemPolicy.set_RemovedCallback(CacheEntryRemovedCallback value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.SlidingExpirationGet">
            <summary>Sets the shim of CacheItemPolicy.get_SlidingExpiration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.SlidingExpirationSetTimeSpan">
            <summary>Sets the shim of CacheItemPolicy.set_SlidingExpiration(TimeSpan value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.UpdateCallbackGet">
            <summary>Sets the shim of CacheItemPolicy.get_UpdateCallback()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimCacheItemPolicy.AllInstances.UpdateCallbackSetCacheEntryUpdateCallback">
            <summary>Sets the shim of CacheItemPolicy.set_UpdateCallback(CacheEntryUpdateCallback value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimEventBus">
            <summary>Shim type of System.Abstract.EventBus</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventBus.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventBus.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventBus.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventBus.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimEventBus.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimEventSource">
            <summary>Shim type of System.Abstract.EventSource</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.#ctor(System.Abstract.EventSource)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.Bind(System.Abstract.IEventSource)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.Bind(System.IServiceProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.Bind(System.Abstract.ServiceManagerBase{System.Abstract.IEventSource,System.Action{System.Abstract.IEventSource},System.Abstract.EventSourceManagerLogger}.ISetupRegistration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.MakeRepositoryOf1M0ISerDes``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Abstract.ISerDes,System.Abstract.EventSourcing.IAggregateRootRepository})">
            <summary>Sets the shim of EventSource.MakeRepository(!!0 arg, ISerDes serDes)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.ConstructorIEventStoreIAggregateRootSnapshotStoreActionOfIEnumerableOfEventFuncOfTypeAggregateRoot">
            <summary>Sets the shim of EventSource.EventSource(IEventStore eventStore, IAggregateRootSnapshotStore snapshotStore, Action`1&lt;IEnumerable`1&lt;Event&gt;&gt; eventDispatcher, Func`2&lt;Type,AggregateRoot&gt; factory)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.DefaultServiceRegistrarSystemAbstractServiceManagerBaseSystemAbstractIEventSourceSystemActionSystemAbstractIEventSourceSystemAbstractEventSourceManagerLoggerISetupRegistrationget">
            <summary>Sets the shim of EventSource.System.Abstract.ServiceManagerBase&lt;System.Abstract.IEventSource,System.Action&lt;System.Abstract.IEventSource&gt;,System.Abstract.EventSourceManagerLogger&gt;.ISetupRegistration.get_DefaultServiceRegistrar()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.GetServiceType">
            <summary>Sets the shim of EventSource.GetService(Type serviceType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.StaticConstructor">
            <summary>Sets the shim of EventSource.EventSource()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource._SystemAbstractServiceManagerBaseSystemAbstractIEventSourceSystemActionSystemAbstractIEventSourceSystemAbstractEventSourceManagerLoggerISetupRegistrationget_DefaultServiceRegistrarb__13IServiceLocatorString">
            <summary>Sets the shim of EventSource.&lt;System.Abstract.ServiceManagerBase&lt;System.Abstract.IEventSource,System.Action&lt;System.Abstract.IEventSource&gt;,System.Abstract.EventSourceManagerLogger&gt;.ISetupRegistration.get_DefaultServiceRegistrar&gt;b__13(IServiceLocator locator, String name)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimEventSource.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.AllInstances.MakeRepositoryOf1M0ISerDes``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.EventSource,``0,System.Abstract.ISerDes,System.Abstract.EventSourcing.IAggregateRootRepository})">
            <summary>Sets the shim of EventSource.MakeRepository(!!0 arg, ISerDes serDes)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.AllInstances.DefaultServiceRegistrarSystemAbstractServiceManagerBaseSystemAbstractIEventSourceSystemActionSystemAbstractIEventSourceSystemAbstractEventSourceManagerLoggerISetupRegistrationget">
            <summary>Sets the shim of EventSource.System.Abstract.ServiceManagerBase&lt;System.Abstract.IEventSource,System.Action&lt;System.Abstract.IEventSource&gt;,System.Abstract.EventSourceManagerLogger&gt;.ISetupRegistration.get_DefaultServiceRegistrar()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.AllInstances.GetServiceType">
            <summary>Sets the shim of EventSource.GetService(Type serviceType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.AllInstances._SystemAbstractServiceManagerBaseSystemAbstractIEventSourceSystemActionSystemAbstractIEventSourceSystemAbstractEventSourceManagerLoggerISetupRegistrationget_DefaultServiceRegistrarb__13IServiceLocatorString">
            <summary>Sets the shim of EventSource.&lt;System.Abstract.ServiceManagerBase&lt;System.Abstract.IEventSource,System.Action&lt;System.Abstract.IEventSource&gt;,System.Abstract.EventSourceManagerLogger&gt;.ISetupRegistration.get_DefaultServiceRegistrar&gt;b__13(IServiceLocator locator, String name)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimEventSource.ShimDefaultFactory">
            <summary>Shim type of System.Abstract.EventSource+DefaultFactory</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.ShimDefaultFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.ShimDefaultFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSource.ShimDefaultFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.ShimDefaultFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.ShimDefaultFactory.StaticConstructor">
            <summary>Sets the shim of DefaultFactory.DefaultFactory()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSource.ShimDefaultFactory._cctorb__14Type">
            <summary>Sets the shim of DefaultFactory.&lt;.cctor&gt;b__14(Type t)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimEventSourceManager">
            <summary>Shim type of System.Abstract.EventSourceManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSourceManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSourceManager.#ctor(System.Abstract.EventSourceManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSourceManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSourceManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager.Constructor">
            <summary>Sets the shim of EventSourceManager.EventSourceManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager.CurrentGet">
            <summary>Sets the shim of EventSourceManager.get_Current()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager.EnsureRegistration">
            <summary>Sets the shim of EventSourceManager.EnsureRegistration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager.GetSetupDescriptorLazyOfIEventSource">
            <summary>Sets the shim of EventSourceManager.GetSetupDescriptor(Lazy`1&lt;IEventSource&gt; service)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager.MakeByProviderFuncOfIEventSourceServiceManagerBaseISetupDescriptorOfIEventSourceActionOfIEventSourceEventSourceManagerLogger">
            <summary>Sets the shim of EventSourceManager.MakeByProvider(Func`1&lt;IEventSource&gt; provider, ISetupDescriptor&lt;IEventSource,Action`1&lt;IEventSource&gt;,EventSourceManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager.SetProviderFuncOfIEventSourceServiceManagerBaseISetupDescriptorOfIEventSourceActionOfIEventSourceEventSourceManagerLogger">
            <summary>Sets the shim of EventSourceManager.SetProvider(Func`1&lt;IEventSource&gt; provider, ISetupDescriptor&lt;IEventSource,Action`1&lt;IEventSource&gt;,EventSourceManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager.StaticConstructor">
            <summary>Sets the shim of EventSourceManager.EventSourceManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager._cctorb__1ActionOfIEventSource">
            <summary>Sets the shim of EventSourceManager.&lt;.cctor&gt;b__1(Action`1&lt;IEventSource&gt; a)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager._cctorb__3IEventSourceServiceManagerBaseISetupDescriptorOfIEventSourceActionOfIEventSourceEventSourceManagerLogger">
            <summary>Sets the shim of EventSourceManager.&lt;.cctor&gt;b__3(IEventSource service, ISetupDescriptor&lt;IEventSource,Action`1&lt;IEventSource&gt;,EventSourceManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManager._cctorb__4IEventSourceServiceManagerBaseISetupDescriptorOfIEventSourceActionOfIEventSourceEventSourceManagerLogger">
            <summary>Sets the shim of EventSourceManager.&lt;.cctor&gt;b__4(IEventSource service, ISetupDescriptor&lt;IEventSource,Action`1&lt;IEventSource&gt;,EventSourceManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimEventSourceManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimEventSourceManagerLogger">
            <summary>Shim type of System.Abstract.EventSourceManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSourceManagerLogger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSourceManagerLogger.#ctor(System.Abstract.EventSourceManagerLogger)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSourceManagerLogger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimEventSourceManagerLogger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManagerLogger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManagerLogger.Constructor">
            <summary>Sets the shim of EventSourceManagerLogger.EventSourceManagerLogger()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManagerLogger.Started">
            <summary>Sets the shim of EventSourceManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimEventSourceManagerLogger.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimEventSourceManagerLogger.AllInstances.Started">
            <summary>Sets the shim of EventSourceManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimIgnoreServiceLocatorAttribute">
            <summary>Shim type of System.Abstract.IgnoreServiceLocatorAttribute</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimIgnoreServiceLocatorAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimIgnoreServiceLocatorAttribute.#ctor(System.Abstract.IgnoreServiceLocatorAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimIgnoreServiceLocatorAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimIgnoreServiceLocatorAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimIgnoreServiceLocatorAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimIgnoreServiceLocatorAttribute.Constructor">
            <summary>Sets the shim of IgnoreServiceLocatorAttribute.IgnoreServiceLocatorAttribute()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimIgnoreServiceLocatorAttribute.HasIgnoreServiceLocatorType">
            <summary>Sets the shim of IgnoreServiceLocatorAttribute.HasIgnoreServiceLocator(Type type)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimIgnoreServiceLocatorAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint">
            <summary>Shim type of System.Abstract.LiteralServiceBusEndpoint</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.#ctor(System.Abstract.LiteralServiceBusEndpoint)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.Bind(System.Abstract.IServiceBusEndpoint)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.ConstructorString">
            <summary>Sets the shim of LiteralServiceBusEndpoint.LiteralServiceBusEndpoint(String literal)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.ValueGet">
            <summary>Sets the shim of LiteralServiceBusEndpoint.get_Value()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.ValueSetString">
            <summary>Sets the shim of LiteralServiceBusEndpoint.set_Value(String value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.AllInstances.ValueGet">
            <summary>Sets the shim of LiteralServiceBusEndpoint.get_Value()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimLiteralServiceBusEndpoint.AllInstances.ValueSetString">
            <summary>Sets the shim of LiteralServiceBusEndpoint.set_Value(String value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceBus">
            <summary>Shim type of System.Abstract.ServiceBus</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBus.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBus.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBus.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBus.SendOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},System.Abstract.IServiceBusCallback})">
            <summary>Sets the shim of ServiceBus.Send(Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBus.SendOf1IServiceBusEndpointActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceBusEndpoint,System.Action{``0},System.Abstract.IServiceBusCallback})">
            <summary>Sets the shim of ServiceBus.Send(IServiceBusEndpoint destination, Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBus.SendOf1StringActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Action{``0},System.Abstract.IServiceBusCallback})">
            <summary>Sets the shim of ServiceBus.Send(String destination, Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBus.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBus.SendIServiceBusEndpointObjectArray">
            <summary>Sets the shim of ServiceBus.Send(IServiceBusEndpoint destination, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBus.SendObjectArray">
            <summary>Sets the shim of ServiceBus.Send(Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBus.SendStringObjectArray">
            <summary>Sets the shim of ServiceBus.Send(String destination, Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBus.StaticConstructor">
            <summary>Sets the shim of ServiceBus.ServiceBus()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceBusManager">
            <summary>Shim type of System.Abstract.ServiceBusManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusManager.#ctor(System.Abstract.ServiceBusManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager.Constructor">
            <summary>Sets the shim of ServiceBusManager.ServiceBusManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager.CurrentGet">
            <summary>Sets the shim of ServiceBusManager.get_Current()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager.EnsureRegistration">
            <summary>Sets the shim of ServiceBusManager.EnsureRegistration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager.GetSetupDescriptorLazyOfIServiceBus">
            <summary>Sets the shim of ServiceBusManager.GetSetupDescriptor(Lazy`1&lt;IServiceBus&gt; service)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager.MakeByProviderFuncOfIServiceBusServiceManagerBaseISetupDescriptorOfIServiceBusActionOfIServiceBusServiceBusManagerLogger">
            <summary>Sets the shim of ServiceBusManager.MakeByProvider(Func`1&lt;IServiceBus&gt; provider, ISetupDescriptor&lt;IServiceBus,Action`1&lt;IServiceBus&gt;,ServiceBusManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager.SetProviderFuncOfIServiceBusServiceManagerBaseISetupDescriptorOfIServiceBusActionOfIServiceBusServiceBusManagerLogger">
            <summary>Sets the shim of ServiceBusManager.SetProvider(Func`1&lt;IServiceBus&gt; provider, ISetupDescriptor&lt;IServiceBus,Action`1&lt;IServiceBus&gt;,ServiceBusManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager.StaticConstructor">
            <summary>Sets the shim of ServiceBusManager.ServiceBusManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager._cctorb__1ActionOfIServiceBus">
            <summary>Sets the shim of ServiceBusManager.&lt;.cctor&gt;b__1(Action`1&lt;IServiceBus&gt; a)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager._cctorb__3IServiceBusServiceManagerBaseISetupDescriptorOfIServiceBusActionOfIServiceBusServiceBusManagerLogger">
            <summary>Sets the shim of ServiceBusManager.&lt;.cctor&gt;b__3(IServiceBus service, ISetupDescriptor&lt;IServiceBus,Action`1&lt;IServiceBus&gt;,ServiceBusManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager._cctorb__4IServiceBusServiceManagerBaseISetupDescriptorOfIServiceBusActionOfIServiceBusServiceBusManagerLogger">
            <summary>Sets the shim of ServiceBusManager.&lt;.cctor&gt;b__4(IServiceBus service, ISetupDescriptor&lt;IServiceBus,Action`1&lt;IServiceBus&gt;,ServiceBusManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManager._cctorb__5IServiceBusIServiceLocatorString">
            <summary>Sets the shim of ServiceBusManager.&lt;.cctor&gt;b__5(IServiceBus service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceBusManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceBusManagerLogger">
            <summary>Shim type of System.Abstract.ServiceBusManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusManagerLogger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusManagerLogger.#ctor(System.Abstract.ServiceBusManagerLogger)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusManagerLogger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusManagerLogger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManagerLogger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManagerLogger.Constructor">
            <summary>Sets the shim of ServiceBusManagerLogger.ServiceBusManagerLogger()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManagerLogger.Started">
            <summary>Sets the shim of ServiceBusManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceBusManagerLogger.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusManagerLogger.AllInstances.Started">
            <summary>Sets the shim of ServiceBusManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceBusMessageException">
            <summary>Shim type of System.Abstract.ServiceBusMessageException</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusMessageException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusMessageException.#ctor(System.Abstract.ServiceBusMessageException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusMessageException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusMessageException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceBusMessageException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusMessageException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusMessageException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ServiceBusMessageException.ServiceBusMessageException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusMessageException.ConstructorType">
            <summary>Sets the shim of ServiceBusMessageException.ServiceBusMessageException(Type message)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusMessageException.ConstructorTypeException">
            <summary>Sets the shim of ServiceBusMessageException.ServiceBusMessageException(Type message, Exception innerException)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusMessageException.MessageTypeGet">
            <summary>Sets the shim of ServiceBusMessageException.get_MessageType()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusMessageException.MessageTypeSetType">
            <summary>Sets the shim of ServiceBusMessageException.set_MessageType(Type value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceBusMessageException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusMessageException.AllInstances.MessageTypeGet">
            <summary>Sets the shim of ServiceBusMessageException.get_MessageType()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceBusMessageException.AllInstances.MessageTypeSetType">
            <summary>Sets the shim of ServiceBusMessageException.set_MessageType(Type value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCache">
            <summary>Shim type of System.Abstract.ServiceCache</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetManyOf1IServiceCacheRegistrationObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCacheRegistration,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ServiceCache.GetMany(IServiceCacheRegistration registration, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetManyOf1IServiceCacheRegistrationObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCacheRegistration,System.Object,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ServiceCache.GetMany(IServiceCacheRegistration registration, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetManyOf1TypeStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.String,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ServiceCache.GetMany(Type anchorType, String registrationName, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetManyOf1TypeStringObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.String,System.Object,System.Object[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ServiceCache.GetMany(Type anchorType, String registrationName, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetOf1IServiceCacheRegistrationObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCacheRegistration,System.Object[],``0})">
            <summary>Sets the shim of ServiceCache.Get(IServiceCacheRegistration registration, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetOf1IServiceCacheRegistrationObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCacheRegistration,System.Object,System.Object[],``0})">
            <summary>Sets the shim of ServiceCache.Get(IServiceCacheRegistration registration, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetOf1TypeStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.String,System.Object[],``0})">
            <summary>Sets the shim of ServiceCache.Get(Type anchorType, String registrationName, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetOf1TypeStringObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.String,System.Object,System.Object[],``0})">
            <summary>Sets the shim of ServiceCache.Get(Type anchorType, String registrationName, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetQueryOf1IServiceCacheRegistrationObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceCacheRegistration,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of ServiceCache.GetQuery(IServiceCacheRegistration registration, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetQueryOf1ServiceCacheRegistrationObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ServiceCacheRegistration,System.Object,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of ServiceCache.GetQuery(ServiceCacheRegistration registration, Object tag, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetQueryOf1TypeStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.String,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of ServiceCache.GetQuery(Type anchorType, String registrationName, Object[] values)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCache.GetQueryOf1TypeStringObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.String,System.Object,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of ServiceCache.GetQuery(Type anchorType, String registrationName, Object tag, Object[] values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCache.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCache.GetIServiceCacheRegistrationObjectArray">
            <summary>Sets the shim of ServiceCache.Get(IServiceCacheRegistration registration, Object[] values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCache.GetIServiceCacheRegistrationObjectObjectArray">
            <summary>Sets the shim of ServiceCache.Get(IServiceCacheRegistration registration, Object tag, Object[] values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCache.GetNamespaceIEnumerableOfObject">
            <summary>Sets the shim of ServiceCache.GetNamespace(IEnumerable`1&lt;Object&gt; values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCache.GetTypeStringObjectArray">
            <summary>Sets the shim of ServiceCache.Get(Type anchorType, String registrationName, Object[] values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCache.GetTypeStringObjectObjectArray">
            <summary>Sets the shim of ServiceCache.Get(Type anchorType, String registrationName, Object tag, Object[] values)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCache.StaticConstructor">
            <summary>Sets the shim of ServiceCache.ServiceCache()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCache.TouchObjectStringArray">
            <summary>Sets the shim of ServiceCache.Touch(Object tag, String[] names)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCache.TouchStringArray">
            <summary>Sets the shim of ServiceCache.Touch(String[] names)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheByDispatcher">
            <summary>Shim type of System.Abstract.ServiceCacheByDispatcher</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheByDispatcher.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheByDispatcher.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheByDispatcher.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheByDispatcher.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheByDispatcher.StaticConstructor">
            <summary>Sets the shim of ServiceCacheByDispatcher.ServiceCacheByDispatcher()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheByDispatcher.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheForeignRegistration">
            <summary>Shim type of System.Abstract.ServiceCacheForeignRegistration</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.#ctor(System.Abstract.ServiceCacheForeignRegistration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.Bind(System.Abstract.IServiceCacheRegistration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AbsoluteNameGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_AbsoluteName()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AbsoluteNameSetString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_AbsoluteName(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AttachRegistrarServiceCacheRegistrarString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.AttachRegistrar(ServiceCacheRegistrar registrar, String absoluteName)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.ConstructorString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.ServiceCacheForeignRegistration(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.ConstructorStringTypeString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.ServiceCacheForeignRegistration(String name, Type foreignType, String foreignName)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.ForeignNameGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_ForeignName()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.ForeignNameSetString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_ForeignName(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.ForeignTypeGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_ForeignType()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.ForeignTypeSetType">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_ForeignType(Type value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.NameGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_Name()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.NameSetString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_Name(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.RegistrarGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_Registrar()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.RegistrarSetServiceCacheRegistrar">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_Registrar(ServiceCacheRegistrar value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.UseHeadersGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_UseHeaders()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.AbsoluteNameGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_AbsoluteName()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.AbsoluteNameSetString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_AbsoluteName(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.AttachRegistrarServiceCacheRegistrarString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.AttachRegistrar(ServiceCacheRegistrar registrar, String absoluteName)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.ForeignNameGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_ForeignName()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.ForeignNameSetString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_ForeignName(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.ForeignTypeGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_ForeignType()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.ForeignTypeSetType">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_ForeignType(Type value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.NameGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_Name()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.NameSetString">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_Name(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.RegistrarGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_Registrar()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.RegistrarSetServiceCacheRegistrar">
            <summary>Sets the shim of ServiceCacheForeignRegistration.set_Registrar(ServiceCacheRegistrar value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheForeignRegistration.AllInstances.UseHeadersGet">
            <summary>Sets the shim of ServiceCacheForeignRegistration.get_UseHeaders()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheManager">
            <summary>Shim type of System.Abstract.ServiceCacheManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheManager.#ctor(System.Abstract.ServiceCacheManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager.Constructor">
            <summary>Sets the shim of ServiceCacheManager.ServiceCacheManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager.CurrentGet">
            <summary>Sets the shim of ServiceCacheManager.get_Current()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager.EnsureRegistration">
            <summary>Sets the shim of ServiceCacheManager.EnsureRegistration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager.GetSetupDescriptorLazyOfIServiceCache">
            <summary>Sets the shim of ServiceCacheManager.GetSetupDescriptor(Lazy`1&lt;IServiceCache&gt; service)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager.MakeByProviderFuncOfIServiceCacheServiceManagerBaseISetupDescriptorOfIServiceCacheActionOfIServiceCacheServiceCacheManagerLogger">
            <summary>Sets the shim of ServiceCacheManager.MakeByProvider(Func`1&lt;IServiceCache&gt; provider, ISetupDescriptor&lt;IServiceCache,Action`1&lt;IServiceCache&gt;,ServiceCacheManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager.SetProviderFuncOfIServiceCacheServiceManagerBaseISetupDescriptorOfIServiceCacheActionOfIServiceCacheServiceCacheManagerLogger">
            <summary>Sets the shim of ServiceCacheManager.SetProvider(Func`1&lt;IServiceCache&gt; provider, ISetupDescriptor&lt;IServiceCache,Action`1&lt;IServiceCache&gt;,ServiceCacheManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager.StaticConstructor">
            <summary>Sets the shim of ServiceCacheManager.ServiceCacheManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager._cctorb__1ActionOfIServiceCache">
            <summary>Sets the shim of ServiceCacheManager.&lt;.cctor&gt;b__1(Action`1&lt;IServiceCache&gt; a)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager._cctorb__3IServiceCacheServiceManagerBaseISetupDescriptorOfIServiceCacheActionOfIServiceCacheServiceCacheManagerLogger">
            <summary>Sets the shim of ServiceCacheManager.&lt;.cctor&gt;b__3(IServiceCache service, ISetupDescriptor&lt;IServiceCache,Action`1&lt;IServiceCache&gt;,ServiceCacheManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager._cctorb__4IServiceCacheServiceManagerBaseISetupDescriptorOfIServiceCacheActionOfIServiceCacheServiceCacheManagerLogger">
            <summary>Sets the shim of ServiceCacheManager.&lt;.cctor&gt;b__4(IServiceCache service, ISetupDescriptor&lt;IServiceCache,Action`1&lt;IServiceCache&gt;,ServiceCacheManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManager._cctorb__5IServiceCacheIServiceLocatorString">
            <summary>Sets the shim of ServiceCacheManager.&lt;.cctor&gt;b__5(IServiceCache service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheManagerLogger">
            <summary>Shim type of System.Abstract.ServiceCacheManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheManagerLogger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheManagerLogger.#ctor(System.Abstract.ServiceCacheManagerLogger)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheManagerLogger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheManagerLogger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManagerLogger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManagerLogger.Constructor">
            <summary>Sets the shim of ServiceCacheManagerLogger.ServiceCacheManagerLogger()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManagerLogger.Started">
            <summary>Sets the shim of ServiceCacheManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheManagerLogger.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheManagerLogger.AllInstances.Started">
            <summary>Sets the shim of ServiceCacheManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheRegistrar">
            <summary>Shim type of System.Abstract.ServiceCacheRegistrar</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistrar.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistrar.#ctor(System.Abstract.ServiceCacheRegistrar)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistrar.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistrar.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistrar.GetOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ServiceCacheRegistrar})">
            <summary>Sets the shim of ServiceCacheRegistrar.Get()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistrar.RegisterAllBelowOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets the shim of ServiceCacheRegistrar.RegisterAllBelow()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllGet">
            <summary>Sets the shim of ServiceCacheRegistrar.get_All()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AnchorTypeGet">
            <summary>Sets the shim of ServiceCacheRegistrar.get_AnchorType()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AnchorTypeSetType">
            <summary>Sets the shim of ServiceCacheRegistrar.set_AnchorType(Type value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.Clear">
            <summary>Sets the shim of ServiceCacheRegistrar.Clear()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.ConstructorType">
            <summary>Sets the shim of ServiceCacheRegistrar.ServiceCacheRegistrar(Type anchorType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.ContainsIServiceCacheRegistration">
            <summary>Sets the shim of ServiceCacheRegistrar.Contains(IServiceCacheRegistration registration)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.ContainsString">
            <summary>Sets the shim of ServiceCacheRegistrar.Contains(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.GetType">
            <summary>Sets the shim of ServiceCacheRegistrar.Get(Type anchorType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.RegisterAllBelowType">
            <summary>Sets the shim of ServiceCacheRegistrar.RegisterAllBelow(Type type)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.RegisterIServiceCacheRegistration">
            <summary>Sets the shim of ServiceCacheRegistrar.Register(IServiceCacheRegistration registration)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.RegisterStringCacheItemBuilderStringArray">
            <summary>Sets the shim of ServiceCacheRegistrar.Register(String name, CacheItemBuilder builder, String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.RegisterStringCacheItemPolicyCacheItemBuilderStringArray">
            <summary>Sets the shim of ServiceCacheRegistrar.Register(String name, CacheItemPolicy itemPolicy, CacheItemBuilder builder, String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.RegisterStringInt32CacheItemBuilderStringArray">
            <summary>Sets the shim of ServiceCacheRegistrar.Register(String name, Int32 minuteTimeout, CacheItemBuilder builder, String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.RemoveIServiceCacheRegistration">
            <summary>Sets the shim of ServiceCacheRegistrar.Remove(IServiceCacheRegistration registration)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.RemoveString">
            <summary>Sets the shim of ServiceCacheRegistrar.Remove(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.StaticConstructor">
            <summary>Sets the shim of ServiceCacheRegistrar.ServiceCacheRegistrar()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.TryGetTypeServiceCacheRegistrarOutBoolean">
            <summary>Sets the shim of ServiceCacheRegistrar.TryGet(Type anchorType, ServiceCacheRegistrar&amp; registrar, Boolean createIfRequired)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.TryGetValueIServiceCacheRegistrationInt32RefIServiceCacheRegistrationOut">
            <summary>Sets the shim of ServiceCacheRegistrar.TryGetValue(IServiceCacheRegistration registration, Int32&amp; recurses, IServiceCacheRegistration&amp; foundRegistration)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.TryGetValueTypeStringInt32RefIServiceCacheRegistrationOut">
            <summary>Sets the shim of ServiceCacheRegistrar.TryGetValue(Type anchorType, String registrationName, Int32&amp; recurses, IServiceCacheRegistration&amp; foundRegistration)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar._RegisterAllBelowb__1FieldInfo">
            <summary>Sets the shim of ServiceCacheRegistrar.&lt;RegisterAllBelow&gt;b__1(FieldInfo f)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.AllGet">
            <summary>Sets the shim of ServiceCacheRegistrar.get_All()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.AnchorTypeGet">
            <summary>Sets the shim of ServiceCacheRegistrar.get_AnchorType()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.AnchorTypeSetType">
            <summary>Sets the shim of ServiceCacheRegistrar.set_AnchorType(Type value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.Clear">
            <summary>Sets the shim of ServiceCacheRegistrar.Clear()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.ContainsIServiceCacheRegistration">
            <summary>Sets the shim of ServiceCacheRegistrar.Contains(IServiceCacheRegistration registration)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.ContainsString">
            <summary>Sets the shim of ServiceCacheRegistrar.Contains(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.RegisterIServiceCacheRegistration">
            <summary>Sets the shim of ServiceCacheRegistrar.Register(IServiceCacheRegistration registration)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.RegisterStringCacheItemBuilderStringArray">
            <summary>Sets the shim of ServiceCacheRegistrar.Register(String name, CacheItemBuilder builder, String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.RegisterStringCacheItemPolicyCacheItemBuilderStringArray">
            <summary>Sets the shim of ServiceCacheRegistrar.Register(String name, CacheItemPolicy itemPolicy, CacheItemBuilder builder, String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.RegisterStringInt32CacheItemBuilderStringArray">
            <summary>Sets the shim of ServiceCacheRegistrar.Register(String name, Int32 minuteTimeout, CacheItemBuilder builder, String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.RemoveIServiceCacheRegistration">
            <summary>Sets the shim of ServiceCacheRegistrar.Remove(IServiceCacheRegistration registration)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistrar.AllInstances.RemoveString">
            <summary>Sets the shim of ServiceCacheRegistrar.Remove(String name)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheRegistration">
            <summary>Shim type of System.Abstract.ServiceCacheRegistration</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.#ctor(System.Abstract.ServiceCacheRegistration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.Bind(System.Abstract.IServiceCacheRegistration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.ConsumeOf1ActionOfServiceCacheRegistrationHandlerContextOfObjectM0ObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{System.Abstract.ServiceCacheRegistration.HandlerContext{System.Object},``0,System.Object,System.Object[]},System.Abstract.ServiceCacheRegistration})">
            <summary>Sets the shim of ServiceCacheRegistration.Consume(Action`4&lt;HandlerContext`1&lt;Object&gt;,!!0,Object,Object[]&gt; action)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.ConsumeOf2ActionOfServiceCacheRegistrationHandlerContextOfM1M0ObjectObjectArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{System.Abstract.ServiceCacheRegistration.HandlerContext{``1},``0,System.Object,System.Object[]},System.Abstract.ServiceCacheRegistration})">
            <summary>Sets the shim of ServiceCacheRegistration.Consume(Action`4&lt;HandlerContext`1&lt;!!1&gt;,!!0,Object,Object[]&gt; action)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.QueryOf1FuncOfServiceCacheRegistrationHandlerContextOfObjectM0ObjectObjectArrayObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Abstract.ServiceCacheRegistration.HandlerContext{System.Object},``0,System.Object,System.Object[],System.Object},System.Abstract.ServiceCacheRegistration})">
            <summary>Sets the shim of ServiceCacheRegistration.Query(Func`5&lt;HandlerContext`1&lt;Object&gt;,!!0,Object,Object[],Object&gt; action)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.QueryOf2FuncOfServiceCacheRegistrationHandlerContextOfM1M0ObjectObjectArrayObject``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Abstract.ServiceCacheRegistration.HandlerContext{``1},``0,System.Object,System.Object[],System.Object},System.Abstract.ServiceCacheRegistration})">
            <summary>Sets the shim of ServiceCacheRegistration.Query(Func`5&lt;HandlerContext`1&lt;!!1&gt;,!!0,Object,Object[],Object&gt; action)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AbsoluteNameGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_AbsoluteName()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AbsoluteNameSetString">
            <summary>Sets the shim of ServiceCacheRegistration.set_AbsoluteName(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AttachRegistrarServiceCacheRegistrarString">
            <summary>Sets the shim of ServiceCacheRegistration.AttachRegistrar(ServiceCacheRegistrar registrar, String absoluteName)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.BuilderGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Builder()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.BuilderSetCacheItemBuilder">
            <summary>Sets the shim of ServiceCacheRegistration.set_Builder(CacheItemBuilder value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorString">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringCacheItemBuilder">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, CacheItemBuilder builder)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringCacheItemBuilderCacheItemDependency">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, CacheItemBuilder builder, CacheItemDependency dependency)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringCacheItemBuilderFuncOfObjectObjectArrayStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, CacheItemBuilder builder, Func`3&lt;Object,Object[],String[]&gt; cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringCacheItemBuilderStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, CacheItemBuilder builder, String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringCacheItemPolicyCacheItemBuilder">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, CacheItemPolicy itemPolicy, CacheItemBuilder builder)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringCacheItemPolicyCacheItemBuilderCacheItemDependency">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, CacheItemPolicy itemPolicy, CacheItemBuilder builder, CacheItemDependency dependency)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringCacheItemPolicyCacheItemBuilderFuncOfObjectObjectArrayStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, CacheItemPolicy itemPolicy, CacheItemBuilder builder, Func`3&lt;Object,Object[],String[]&gt; cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringCacheItemPolicyCacheItemBuilderStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, CacheItemPolicy itemPolicy, CacheItemBuilder builder, String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringInt32CacheItemBuilderCacheItemDependency">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, Int32 minuteTimeout, CacheItemBuilder builder, CacheItemDependency dependency)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringInt32CacheItemBuilderFuncOfObjectObjectArrayStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, Int32 minuteTimeout, CacheItemBuilder builder, Func`3&lt;Object,Object[],String[]&gt; cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ConstructorStringInt32CacheItemBuilderStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.ServiceCacheRegistration(String name, Int32 minuteTimeout, CacheItemBuilder builder, String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.GetHandlersForObjectArray">
            <summary>Sets the shim of ServiceCacheRegistration.GetHandlersFor(Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ItemPolicyGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_ItemPolicy()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ItemPolicySetCacheItemPolicy">
            <summary>Sets the shim of ServiceCacheRegistration.set_ItemPolicy(CacheItemPolicy value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.KeysGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Keys()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.NameGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Name()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.NameSetString">
            <summary>Sets the shim of ServiceCacheRegistration.set_Name(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.NamespacesGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Namespaces()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.NamespacesSetIEnumerableOfString">
            <summary>Sets the shim of ServiceCacheRegistration.set_Namespaces(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.RegistrarGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Registrar()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.RegistrarSetServiceCacheRegistrar">
            <summary>Sets the shim of ServiceCacheRegistration.set_Registrar(ServiceCacheRegistrar value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.SetItemPolicyDependencyCacheItemDependency">
            <summary>Sets the shim of ServiceCacheRegistration.SetItemPolicyDependency(CacheItemDependency dependency)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.SetItemPolicyDependencyFuncOfObjectObjectArrayStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.SetItemPolicyDependency(Func`3&lt;Object,Object[],String[]&gt; cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.SetItemPolicyDependencyStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.SetItemPolicyDependency(String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.UseHeadersGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_UseHeaders()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.UseHeadersSetBoolean">
            <summary>Sets the shim of ServiceCacheRegistration.set_UseHeaders(Boolean value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.ConsumeOf1ActionOfServiceCacheRegistrationHandlerContextOfObjectM0ObjectObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ServiceCacheRegistration,System.Action{System.Abstract.ServiceCacheRegistration.HandlerContext{System.Object},``0,System.Object,System.Object[]},System.Abstract.ServiceCacheRegistration})">
            <summary>Sets the shim of ServiceCacheRegistration.Consume(Action`4&lt;HandlerContext`1&lt;Object&gt;,!!0,Object,Object[]&gt; action)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.ConsumeOf2ActionOfServiceCacheRegistrationHandlerContextOfM1M0ObjectObjectArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ServiceCacheRegistration,System.Action{System.Abstract.ServiceCacheRegistration.HandlerContext{``1},``0,System.Object,System.Object[]},System.Abstract.ServiceCacheRegistration})">
            <summary>Sets the shim of ServiceCacheRegistration.Consume(Action`4&lt;HandlerContext`1&lt;!!1&gt;,!!0,Object,Object[]&gt; action)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.QueryOf1FuncOfServiceCacheRegistrationHandlerContextOfObjectM0ObjectObjectArrayObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ServiceCacheRegistration,System.Func{System.Abstract.ServiceCacheRegistration.HandlerContext{System.Object},``0,System.Object,System.Object[],System.Object},System.Abstract.ServiceCacheRegistration})">
            <summary>Sets the shim of ServiceCacheRegistration.Query(Func`5&lt;HandlerContext`1&lt;Object&gt;,!!0,Object,Object[],Object&gt; action)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.QueryOf2FuncOfServiceCacheRegistrationHandlerContextOfM1M0ObjectObjectArrayObject``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.ServiceCacheRegistration,System.Func{System.Abstract.ServiceCacheRegistration.HandlerContext{``1},``0,System.Object,System.Object[],System.Object},System.Abstract.ServiceCacheRegistration})">
            <summary>Sets the shim of ServiceCacheRegistration.Query(Func`5&lt;HandlerContext`1&lt;!!1&gt;,!!0,Object,Object[],Object&gt; action)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.AbsoluteNameGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_AbsoluteName()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.AbsoluteNameSetString">
            <summary>Sets the shim of ServiceCacheRegistration.set_AbsoluteName(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.AttachRegistrarServiceCacheRegistrarString">
            <summary>Sets the shim of ServiceCacheRegistration.AttachRegistrar(ServiceCacheRegistrar registrar, String absoluteName)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.BuilderGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Builder()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.BuilderSetCacheItemBuilder">
            <summary>Sets the shim of ServiceCacheRegistration.set_Builder(CacheItemBuilder value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.GetHandlersForObjectArray">
            <summary>Sets the shim of ServiceCacheRegistration.GetHandlersFor(Object[] messages)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.ItemPolicyGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_ItemPolicy()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.ItemPolicySetCacheItemPolicy">
            <summary>Sets the shim of ServiceCacheRegistration.set_ItemPolicy(CacheItemPolicy value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.KeysGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Keys()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.NameGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Name()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.NameSetString">
            <summary>Sets the shim of ServiceCacheRegistration.set_Name(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.NamespacesGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Namespaces()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.NamespacesSetIEnumerableOfString">
            <summary>Sets the shim of ServiceCacheRegistration.set_Namespaces(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.RegistrarGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_Registrar()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.RegistrarSetServiceCacheRegistrar">
            <summary>Sets the shim of ServiceCacheRegistration.set_Registrar(ServiceCacheRegistrar value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.SetItemPolicyDependencyCacheItemDependency">
            <summary>Sets the shim of ServiceCacheRegistration.SetItemPolicyDependency(CacheItemDependency dependency)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.SetItemPolicyDependencyFuncOfObjectObjectArrayStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.SetItemPolicyDependency(Func`3&lt;Object,Object[],String[]&gt; cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.SetItemPolicyDependencyStringArray">
            <summary>Sets the shim of ServiceCacheRegistration.SetItemPolicyDependency(String[] cacheTags)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.UseHeadersGet">
            <summary>Sets the shim of ServiceCacheRegistration.get_UseHeaders()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.AllInstances.UseHeadersSetBoolean">
            <summary>Sets the shim of ServiceCacheRegistration.set_UseHeaders(Boolean value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1">
            <summary>Shim type of System.Abstract.ServiceCacheRegistration+HandlerContext`1</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.#ctor(System.Abstract.ServiceCacheRegistration.HandlerContext{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.Constructor">
            <summary>Sets the shim of HandlerContext`1.HandlerContext`1()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.GetGet">
            <summary>Sets the shim of HandlerContext`1.get_Get()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.GetSetFuncOfT0">
            <summary>Sets the shim of HandlerContext`1.set_Get(Func`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.UpdateGet">
            <summary>Sets the shim of HandlerContext`1.get_Update()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.UpdateSetActionOfT0">
            <summary>Sets the shim of HandlerContext`1.set_Update(Action`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.AllInstances.GetGet">
            <summary>Sets the shim of HandlerContext`1.get_Get()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.AllInstances.GetSetFuncOfT0">
            <summary>Sets the shim of HandlerContext`1.set_Get(Func`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.AllInstances.UpdateGet">
            <summary>Sets the shim of HandlerContext`1.get_Update()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerContext`1.AllInstances.UpdateSetActionOfT0">
            <summary>Sets the shim of HandlerContext`1.set_Update(Action`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerInfo">
            <summary>Shim type of System.Abstract.ServiceCacheRegistration+HandlerInfo</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerInfo.StaticConstructor">
            <summary>Sets the shim of HandlerInfo.HandlerInfo()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheRegistration.ShimHandlerInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheSettings">
            <summary>Shim type of System.Abstract.ServiceCacheSettings</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheSettings.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheSettings.#ctor(System.Abstract.ServiceCacheSettings)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheSettings.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceCacheSettings.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.Constructor">
            <summary>Sets the shim of ServiceCacheSettings.ServiceCacheSettings()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.ConstructorITouchableCacheItem">
            <summary>Sets the shim of ServiceCacheSettings.ServiceCacheSettings(ITouchableCacheItem touchable)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.OptionsGet">
            <summary>Sets the shim of ServiceCacheSettings.get_Options()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.OptionsSetServiceCacheOptions">
            <summary>Sets the shim of ServiceCacheSettings.set_Options(ServiceCacheOptions value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.RegionMarkerGet">
            <summary>Sets the shim of ServiceCacheSettings.get_RegionMarker()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.RegionMarkerSetString">
            <summary>Sets the shim of ServiceCacheSettings.set_RegionMarker(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.RegistrationDispatcherGet">
            <summary>Sets the shim of ServiceCacheSettings.get_RegistrationDispatcher()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.RegistrationDispatcherSetServiceCacheRegistrationIDispatcher">
            <summary>Sets the shim of ServiceCacheSettings.set_RegistrationDispatcher(IDispatcher value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.TouchableGet">
            <summary>Sets the shim of ServiceCacheSettings.get_Touchable()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.TouchableSetITouchableCacheItem">
            <summary>Sets the shim of ServiceCacheSettings.set_Touchable(ITouchableCacheItem value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceCacheSettings.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.AllInstances.OptionsGet">
            <summary>Sets the shim of ServiceCacheSettings.get_Options()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.AllInstances.OptionsSetServiceCacheOptions">
            <summary>Sets the shim of ServiceCacheSettings.set_Options(ServiceCacheOptions value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.AllInstances.RegionMarkerGet">
            <summary>Sets the shim of ServiceCacheSettings.get_RegionMarker()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.AllInstances.RegionMarkerSetString">
            <summary>Sets the shim of ServiceCacheSettings.set_RegionMarker(String value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.AllInstances.RegistrationDispatcherGet">
            <summary>Sets the shim of ServiceCacheSettings.get_RegistrationDispatcher()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.AllInstances.RegistrationDispatcherSetServiceCacheRegistrationIDispatcher">
            <summary>Sets the shim of ServiceCacheSettings.set_RegistrationDispatcher(IDispatcher value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.AllInstances.TouchableGet">
            <summary>Sets the shim of ServiceCacheSettings.get_Touchable()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceCacheSettings.AllInstances.TouchableSetITouchableCacheItem">
            <summary>Sets the shim of ServiceCacheSettings.set_Touchable(ITouchableCacheItem value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceDependencyAttribute">
            <summary>Shim type of System.Abstract.ServiceDependencyAttribute</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceDependencyAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceDependencyAttribute.#ctor(System.Abstract.ServiceDependencyAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceDependencyAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceDependencyAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceDependencyAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceDependencyAttribute.Constructor">
            <summary>Sets the shim of ServiceDependencyAttribute.ServiceDependencyAttribute()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceDependencyAttribute.ConstructorString">
            <summary>Sets the shim of ServiceDependencyAttribute.ServiceDependencyAttribute(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceDependencyAttribute.GetServiceDependenciesParameterInfo">
            <summary>Sets the shim of ServiceDependencyAttribute.GetServiceDependencies(ParameterInfo parameter)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceDependencyAttribute.GetServiceDependenciesPropertyInfo">
            <summary>Sets the shim of ServiceDependencyAttribute.GetServiceDependencies(PropertyInfo property)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceDependencyAttribute.NameGet">
            <summary>Sets the shim of ServiceDependencyAttribute.get_Name()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceDependencyAttribute.NameSetString">
            <summary>Sets the shim of ServiceDependencyAttribute.set_Name(String value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceDependencyAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceDependencyAttribute.AllInstances.NameGet">
            <summary>Sets the shim of ServiceDependencyAttribute.get_Name()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceDependencyAttribute.AllInstances.NameSetString">
            <summary>Sets the shim of ServiceDependencyAttribute.set_Name(String value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceInjectionConstructorAttribute">
            <summary>Shim type of System.Abstract.ServiceInjectionConstructorAttribute</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceInjectionConstructorAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceInjectionConstructorAttribute.#ctor(System.Abstract.ServiceInjectionConstructorAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceInjectionConstructorAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceInjectionConstructorAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceInjectionConstructorAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceInjectionConstructorAttribute.Constructor">
            <summary>Sets the shim of ServiceInjectionConstructorAttribute.ServiceInjectionConstructorAttribute()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceInjectionConstructorAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceInjectionMethodAttribute">
            <summary>Shim type of System.Abstract.ServiceInjectionMethodAttribute</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceInjectionMethodAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceInjectionMethodAttribute.#ctor(System.Abstract.ServiceInjectionMethodAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceInjectionMethodAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceInjectionMethodAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceInjectionMethodAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceInjectionMethodAttribute.Constructor">
            <summary>Sets the shim of ServiceInjectionMethodAttribute.ServiceInjectionMethodAttribute()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceInjectionMethodAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLocator">
            <summary>Shim type of System.Abstract.ServiceLocator</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocator.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ServiceLocator.ResolveAll()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocator.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of ServiceLocator.Resolve()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLocatorManager">
            <summary>Shim type of System.Abstract.ServiceLocatorManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorManager.#ctor(System.Abstract.ServiceLocatorManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorManager.HasIgnoreServiceLocatorOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Boolean})">
            <summary>Sets the shim of ServiceLocatorManager.HasIgnoreServiceLocator()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.Constructor">
            <summary>Sets the shim of ServiceLocatorManager.ServiceLocatorManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.CurrentGet">
            <summary>Sets the shim of ServiceLocatorManager.get_Current()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.EnsureRegistration">
            <summary>Sets the shim of ServiceLocatorManager.EnsureRegistration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.GetSetupDescriptorLazyOfIServiceLocator">
            <summary>Sets the shim of ServiceLocatorManager.GetSetupDescriptor(Lazy`1&lt;IServiceLocator&gt; service)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.HasIgnoreServiceLocatorObject">
            <summary>Sets the shim of ServiceLocatorManager.HasIgnoreServiceLocator(Object instance)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.HasIgnoreServiceLocatorType">
            <summary>Sets the shim of ServiceLocatorManager.HasIgnoreServiceLocator(Type type)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.MakeByProviderFuncOfIServiceLocatorServiceManagerBaseISetupDescriptorOfIServiceLocatorActionOfIServiceLocatorServiceLocatorManagerLogger">
            <summary>Sets the shim of ServiceLocatorManager.MakeByProvider(Func`1&lt;IServiceLocator&gt; provider, ISetupDescriptor&lt;IServiceLocator,Action`1&lt;IServiceLocator&gt;,ServiceLocatorManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.RegisterSelfInLocatorIServiceLocator">
            <summary>Sets the shim of ServiceLocatorManager.RegisterSelfInLocator(IServiceLocator locator)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.SetProviderFuncOfIServiceLocatorServiceManagerBaseISetupDescriptorOfIServiceLocatorActionOfIServiceLocatorServiceLocatorManagerLogger">
            <summary>Sets the shim of ServiceLocatorManager.SetProvider(Func`1&lt;IServiceLocator&gt; provider, ISetupDescriptor&lt;IServiceLocator,Action`1&lt;IServiceLocator&gt;,ServiceLocatorManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager.StaticConstructor">
            <summary>Sets the shim of ServiceLocatorManager.ServiceLocatorManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager._cctorb__1ActionOfIServiceLocator">
            <summary>Sets the shim of ServiceLocatorManager.&lt;.cctor&gt;b__1(Action`1&lt;IServiceLocator&gt; a)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager._cctorb__3IServiceLocatorServiceManagerBaseISetupDescriptorOfIServiceLocatorActionOfIServiceLocatorServiceLocatorManagerLogger">
            <summary>Sets the shim of ServiceLocatorManager.&lt;.cctor&gt;b__3(IServiceLocator service, ISetupDescriptor&lt;IServiceLocator,Action`1&lt;IServiceLocator&gt;,ServiceLocatorManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManager._cctorb__4IServiceLocatorServiceManagerBaseISetupDescriptorOfIServiceLocatorActionOfIServiceLocatorServiceLocatorManagerLogger">
            <summary>Sets the shim of ServiceLocatorManager.&lt;.cctor&gt;b__4(IServiceLocator service, ISetupDescriptor&lt;IServiceLocator,Action`1&lt;IServiceLocator&gt;,ServiceLocatorManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLocatorManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLocatorManagerLogger">
            <summary>Shim type of System.Abstract.ServiceLocatorManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorManagerLogger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorManagerLogger.#ctor(System.Abstract.ServiceLocatorManagerLogger)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorManagerLogger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorManagerLogger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManagerLogger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManagerLogger.Constructor">
            <summary>Sets the shim of ServiceLocatorManagerLogger.ServiceLocatorManagerLogger()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManagerLogger.Started">
            <summary>Sets the shim of ServiceLocatorManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLocatorManagerLogger.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorManagerLogger.AllInstances.Started">
            <summary>Sets the shim of ServiceLocatorManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLocatorResolutionException">
            <summary>Shim type of System.Abstract.ServiceLocatorResolutionException</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorResolutionException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorResolutionException.#ctor(System.Abstract.ServiceLocatorResolutionException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorResolutionException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorResolutionException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLocatorResolutionException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorResolutionException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorResolutionException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ServiceLocatorResolutionException.ServiceLocatorResolutionException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorResolutionException.ConstructorType">
            <summary>Sets the shim of ServiceLocatorResolutionException.ServiceLocatorResolutionException(Type service)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorResolutionException.ConstructorTypeException">
            <summary>Sets the shim of ServiceLocatorResolutionException.ServiceLocatorResolutionException(Type service, Exception innerException)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorResolutionException.ConstructorTypeString">
            <summary>Sets the shim of ServiceLocatorResolutionException.ServiceLocatorResolutionException(Type service, String arg0)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorResolutionException.ServiceTypeGet">
            <summary>Sets the shim of ServiceLocatorResolutionException.get_ServiceType()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorResolutionException.ServiceTypeSetType">
            <summary>Sets the shim of ServiceLocatorResolutionException.set_ServiceType(Type value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLocatorResolutionException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorResolutionException.AllInstances.ServiceTypeGet">
            <summary>Sets the shim of ServiceLocatorResolutionException.get_ServiceType()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLocatorResolutionException.AllInstances.ServiceTypeSetType">
            <summary>Sets the shim of ServiceLocatorResolutionException.set_ServiceType(Type value)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLogManager">
            <summary>Shim type of System.Abstract.ServiceLogManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.#ctor(System.Abstract.ServiceLogManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.GetOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Abstract.IServiceLog})">
            <summary>Sets the shim of ServiceLogManager.Get()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.Constructor">
            <summary>Sets the shim of ServiceLogManager.ServiceLogManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.CurrentGet">
            <summary>Sets the shim of ServiceLogManager.get_Current()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.EnsureRegistration">
            <summary>Sets the shim of ServiceLogManager.EnsureRegistration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.GetSetupDescriptorLazyOfIServiceLog">
            <summary>Sets the shim of ServiceLogManager.GetSetupDescriptor(Lazy`1&lt;IServiceLog&gt; service)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.GetString">
            <summary>Sets the shim of ServiceLogManager.Get(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.MakeByProviderFuncOfIServiceLogServiceManagerBaseISetupDescriptorOfIServiceLogActionOfIServiceLogServiceLogManagerLogger">
            <summary>Sets the shim of ServiceLogManager.MakeByProvider(Func`1&lt;IServiceLog&gt; provider, ISetupDescriptor&lt;IServiceLog,Action`1&lt;IServiceLog&gt;,ServiceLogManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.SetProviderFuncOfIServiceLogServiceManagerBaseISetupDescriptorOfIServiceLogActionOfIServiceLogServiceLogManagerLogger">
            <summary>Sets the shim of ServiceLogManager.SetProvider(Func`1&lt;IServiceLog&gt; provider, ISetupDescriptor&lt;IServiceLog,Action`1&lt;IServiceLog&gt;,ServiceLogManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.StaticConstructor">
            <summary>Sets the shim of ServiceLogManager.ServiceLogManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager._cctorb__1">
            <summary>Sets the shim of ServiceLogManager.&lt;.cctor&gt;b__1()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager._cctorb__2ActionOfIServiceLog">
            <summary>Sets the shim of ServiceLogManager.&lt;.cctor&gt;b__2(Action`1&lt;IServiceLog&gt; a)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager._cctorb__4IServiceLogServiceManagerBaseISetupDescriptorOfIServiceLogActionOfIServiceLogServiceLogManagerLogger">
            <summary>Sets the shim of ServiceLogManager.&lt;.cctor&gt;b__4(IServiceLog service, ISetupDescriptor&lt;IServiceLog,Action`1&lt;IServiceLog&gt;,ServiceLogManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager._cctorb__5IServiceLogServiceManagerBaseISetupDescriptorOfIServiceLogActionOfIServiceLogServiceLogManagerLogger">
            <summary>Sets the shim of ServiceLogManager.&lt;.cctor&gt;b__5(IServiceLog service, ISetupDescriptor&lt;IServiceLog,Action`1&lt;IServiceLog&gt;,ServiceLogManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLogManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog">
            <summary>Shim type of System.Abstract.ServiceLogManager+EmptyServiceLog</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.#ctor(System.Abstract.ServiceLogManager.EmptyServiceLog)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.Bind(System.Abstract.IServiceLog)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.Bind(System.IServiceProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.Constructor">
            <summary>Sets the shim of EmptyServiceLog.EmptyServiceLog()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.GetServiceType">
            <summary>Sets the shim of EmptyServiceLog.GetService(Type serviceType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.GetString">
            <summary>Sets the shim of EmptyServiceLog.Get(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.GetType">
            <summary>Sets the shim of EmptyServiceLog.Get(Type type)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.NameGet">
            <summary>Sets the shim of EmptyServiceLog.get_Name()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.WriteServiceLogLevelExceptionString">
            <summary>Sets the shim of EmptyServiceLog.Write(ServiceLogLevel level, Exception ex, String s)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.AllInstances.GetServiceType">
            <summary>Sets the shim of EmptyServiceLog.GetService(Type serviceType)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.AllInstances.GetString">
            <summary>Sets the shim of EmptyServiceLog.Get(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.AllInstances.GetType01">
            <summary>Sets the shim of EmptyServiceLog.Get(Type type)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.AllInstances.NameGet">
            <summary>Sets the shim of EmptyServiceLog.get_Name()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManager.ShimEmptyServiceLog.AllInstances.WriteServiceLogLevelExceptionString">
            <summary>Sets the shim of EmptyServiceLog.Write(ServiceLogLevel level, Exception ex, String s)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLogManagerLogger">
            <summary>Shim type of System.Abstract.ServiceLogManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManagerLogger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManagerLogger.#ctor(System.Abstract.ServiceLogManagerLogger)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManagerLogger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceLogManagerLogger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManagerLogger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManagerLogger.Constructor">
            <summary>Sets the shim of ServiceLogManagerLogger.ServiceLogManagerLogger()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManagerLogger.Started">
            <summary>Sets the shim of ServiceLogManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceLogManagerLogger.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceLogManagerLogger.AllInstances.Started">
            <summary>Sets the shim of ServiceLogManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceManagerBase`3">
            <summary>Shim type of System.Abstract.ServiceManagerBase`3</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceManagerBase`3.#ctor(System.Abstract.ServiceManagerBase{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceManagerBase`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceManagerBase`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceManagerBase`3.RegisterInstanceOf1M0IServiceLocatorString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,System.Abstract.IServiceLocator,System.String})">
            <summary>Sets the shim of ServiceManagerBase`3.RegisterInstance(!!0 service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.ApplyChangeLazyOfT0ServiceManagerBaseISetupDescriptorOfT0T1T2">
            <summary>Sets the shim of ServiceManagerBase`3.ApplyChange(Lazy`1&lt;!0&gt; service, ISetupDescriptor&lt;!0,!1,!2&gt; changeDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.ApplySetupLazyOfT0T0">
            <summary>Sets the shim of ServiceManagerBase`3.ApplySetup(Lazy`1&lt;!0&gt; service, !0 newInstance)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.Constructor">
            <summary>Sets the shim of ServiceManagerBase`3.ServiceManagerBase`3()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.DefaultServiceProviderGet">
            <summary>Sets the shim of ServiceManagerBase`3.get_DefaultServiceProvider()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.DefaultServiceProviderSetFuncOfT0">
            <summary>Sets the shim of ServiceManagerBase`3.set_DefaultServiceProvider(Func`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.GetCurrent">
            <summary>Sets the shim of ServiceManagerBase`3.GetCurrent()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.GetSetupDescriptorProtectedLazyOfT0ServiceManagerBaseISetupDescriptorOfT0T1T2">
            <summary>Sets the shim of ServiceManagerBase`3.GetSetupDescriptorProtected(Lazy`1&lt;!0&gt; service, ISetupDescriptor&lt;!0,!1,!2&gt; firstDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.LastExceptionGet">
            <summary>Sets the shim of ServiceManagerBase`3.get_LastException()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.LastExceptionSetException">
            <summary>Sets the shim of ServiceManagerBase`3.set_LastException(Exception value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.LazyGet">
            <summary>Sets the shim of ServiceManagerBase`3.get_Lazy()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.LazySetLazyOfT0">
            <summary>Sets the shim of ServiceManagerBase`3.set_Lazy(Lazy`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.LoggerGet">
            <summary>Sets the shim of ServiceManagerBase`3.get_Logger()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.LoggerSetT2">
            <summary>Sets the shim of ServiceManagerBase`3.set_Logger(!2 value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.MakeByProviderProtectedFuncOfT0ServiceManagerBaseISetupDescriptorOfT0T1T2">
            <summary>Sets the shim of ServiceManagerBase`3.MakeByProviderProtected(Func`1&lt;!0&gt; provider, ISetupDescriptor&lt;!0,!1,!2&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceManagerBase`3.StaticConstructor">
            <summary>Sets the shim of ServiceManagerBase`3.ServiceManagerBase`3()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceManagerBase`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceMapManager">
            <summary>Shim type of System.Abstract.ServiceMapManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceMapManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceMapManager.#ctor(System.Abstract.ServiceMapManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceMapManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceMapManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager.Constructor">
            <summary>Sets the shim of ServiceMapManager.ServiceMapManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager.CurrentGet">
            <summary>Sets the shim of ServiceMapManager.get_Current()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager.EnsureRegistration">
            <summary>Sets the shim of ServiceMapManager.EnsureRegistration()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager.GetSetupDescriptorLazyOfIServiceMap">
            <summary>Sets the shim of ServiceMapManager.GetSetupDescriptor(Lazy`1&lt;IServiceMap&gt; service)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager.MakeByProviderFuncOfIServiceMapServiceManagerBaseISetupDescriptorOfIServiceMapActionOfIServiceMapServiceMapManagerLogger">
            <summary>Sets the shim of ServiceMapManager.MakeByProvider(Func`1&lt;IServiceMap&gt; provider, ISetupDescriptor&lt;IServiceMap,Action`1&lt;IServiceMap&gt;,ServiceMapManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager.SetProviderFuncOfIServiceMapServiceManagerBaseISetupDescriptorOfIServiceMapActionOfIServiceMapServiceMapManagerLogger">
            <summary>Sets the shim of ServiceMapManager.SetProvider(Func`1&lt;IServiceMap&gt; provider, ISetupDescriptor&lt;IServiceMap,Action`1&lt;IServiceMap&gt;,ServiceMapManagerLogger&gt; setupDescriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager.StaticConstructor">
            <summary>Sets the shim of ServiceMapManager.ServiceMapManager()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager._cctorb__1ActionOfIServiceMap">
            <summary>Sets the shim of ServiceMapManager.&lt;.cctor&gt;b__1(Action`1&lt;IServiceMap&gt; a)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager._cctorb__3IServiceMapServiceManagerBaseISetupDescriptorOfIServiceMapActionOfIServiceMapServiceMapManagerLogger">
            <summary>Sets the shim of ServiceMapManager.&lt;.cctor&gt;b__3(IServiceMap service, ISetupDescriptor&lt;IServiceMap,Action`1&lt;IServiceMap&gt;,ServiceMapManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager._cctorb__4IServiceMapServiceManagerBaseISetupDescriptorOfIServiceMapActionOfIServiceMapServiceMapManagerLogger">
            <summary>Sets the shim of ServiceMapManager.&lt;.cctor&gt;b__4(IServiceMap service, ISetupDescriptor&lt;IServiceMap,Action`1&lt;IServiceMap&gt;,ServiceMapManagerLogger&gt; descriptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManager._cctorb__5IServiceMapIServiceLocatorString">
            <summary>Sets the shim of ServiceMapManager.&lt;.cctor&gt;b__5(IServiceMap service, IServiceLocator locator, String name)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceMapManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceMapManagerLogger">
            <summary>Shim type of System.Abstract.ServiceMapManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceMapManagerLogger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceMapManagerLogger.#ctor(System.Abstract.ServiceMapManagerLogger)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceMapManagerLogger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceMapManagerLogger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManagerLogger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManagerLogger.Constructor">
            <summary>Sets the shim of ServiceMapManagerLogger.ServiceMapManagerLogger()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManagerLogger.Started">
            <summary>Sets the shim of ServiceMapManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceMapManagerLogger.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceMapManagerLogger.AllInstances.Started">
            <summary>Sets the shim of ServiceMapManagerLogger.Started()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceRegistration">
            <summary>Shim type of System.Abstract.ServiceRegistration</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceRegistration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceRegistration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Abstract.Fakes.ShimServiceRegistration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Abstract.Fakes.ShimServiceRegistration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:System.Abstract.Fakes.ShimServiceRegistration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem">
            <summary>Stub type of System.Abstract.AbstractFileTouchableCacheItem</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.#ctor(System.Abstract.IServiceCache,System.Abstract.ITouchableCacheItem)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.CanTouch(System.Object,System.String@)">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.CanTouch(Object tag, String&amp; name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.CanTouchObjectStringRef">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.CanTouch(Object tag, String&amp; name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.GetFilePathForName(System.String)">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.GetFilePathForName(String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.GetFilePathForNameString">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.GetFilePathForName(String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractFileTouchableCacheItem</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.MakeDependency(System.Object,System.String[])">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.MakeDependency(Object tag, String[] names)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.MakeDependencyInternal(System.Object,System.String[],System.Object)">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.MakeDependencyInternal(Object tag, String[] names, Object baseDependency)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.MakeDependencyInternalObjectStringArrayObject">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.MakeDependencyInternal(Object tag, String[] names, Object baseDependency)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.MakeDependencyObjectStringArray">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.MakeDependency(Object tag, String[] names)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.Touch(System.Object,System.String[])">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.Touch(Object tag, String[] names)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.TouchObjectStringArray">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.Touch(Object tag, String[] names)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.WriteBodyForName(System.String,System.String)">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.WriteBodyForName(String name, String path)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.WriteBodyForNameStringString">
            <summary>Sets the stub of AbstractFileTouchableCacheItem.WriteBodyForName(String name, String path)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubAbstractFileTouchableCacheItem.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubCacheItemHeader">
            <summary>Stub type of System.Abstract.CacheItemHeader</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubCacheItemHeader.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubCacheItemHeader.InitializeStub">
            <summary>Initializes a new instance of type StubCacheItemHeader</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubCacheItemHeader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubCacheItemHeader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubCacheItemHeader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubCacheItemPolicy">
            <summary>Stub type of System.Abstract.CacheItemPolicy</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubCacheItemPolicy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubCacheItemPolicy.#ctor(System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubCacheItemPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubCacheItemPolicy</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubCacheItemPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubCacheItemPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubCacheItemPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubEventSource">
            <summary>Stub type of System.Abstract.EventSource</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubEventSource.#ctor(System.Abstract.EventSourcing.IEventStore,System.Abstract.EventSourcing.IAggregateRootSnapshotStore,System.Action{System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event}},System.Func{System.Type,System.Abstract.EventSourcing.AggregateRoot})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubEventSource.InitializeStub">
            <summary>Initializes a new instance of type StubEventSource</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubEventSource.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubEventSource.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubEventSource.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubEventSourceManager">
            <summary>Stub type of System.Abstract.EventSourceManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubEventSourceManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubEventSourceManager.InitializeStub">
            <summary>Initializes a new instance of type StubEventSourceManager</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubEventSourceManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubEventSourceManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubEventSourceManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubEventSourceManagerLogger">
            <summary>Stub type of System.Abstract.EventSourceManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubEventSourceManagerLogger.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubEventSourceManagerLogger.InitializeStub">
            <summary>Initializes a new instance of type StubEventSourceManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubEventSourceManagerLogger.Started">
            <summary>Sets the stub of EventSourceManagerLogger.Started()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubEventSourceManagerLogger.Started01">
            <summary>Sets the stub of EventSourceManagerLogger.Started()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubEventSourceManagerLogger.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubEventSourceManagerLogger.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubEventSourceManagerLogger.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIDistributedServiceCache">
            <summary>Stub type of System.Abstract.IDistributedServiceCache</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.#ctor">
            <summary>Initializes a new instance of type StubIDistributedServiceCache</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.AddObjectStringCacheItemPolicyObjectServiceCacheByDispatcher">
            <summary>Sets the stub of IServiceCache.Add(Object tag, String name, CacheItemPolicy itemPolicy, Object value, ServiceCacheByDispatcher dispatch)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.GetObjectIEnumerableOfString">
            <summary>Sets the stub of IServiceCache.Get(Object tag, IEnumerable`1&lt;String&gt; names)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.GetObjectIServiceCacheRegistration">
            <summary>Sets the stub of IServiceCache.Get(Object tag, IServiceCacheRegistration registration)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.GetObjectString">
            <summary>Sets the stub of IServiceCache.Get(Object tag, String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.GetObjectStringIServiceCacheRegistrationCacheItemHeaderOut">
            <summary>Sets the stub of IServiceCache.Get(Object tag, String name, IServiceCacheRegistration registration, CacheItemHeader&amp; header)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.ItemGetString">
            <summary>Sets the stub of IServiceCache.get_Item(String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.ItemSetStringObject">
            <summary>Sets the stub of IServiceCache.set_Item(String name, Object value)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.RemoveObjectStringIServiceCacheRegistration">
            <summary>Sets the stub of IServiceCache.Remove(Object tag, String name, IServiceCacheRegistration registration)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.SetObjectStringCacheItemPolicyObjectServiceCacheByDispatcher">
            <summary>Sets the stub of IServiceCache.Set(Object tag, String name, CacheItemPolicy itemPolicy, Object value, ServiceCacheByDispatcher dispatch)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.SettingsGet">
            <summary>Sets the stub of IServiceCache.get_Settings()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.sa::System#Abstract#IServiceCache#Add(System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object,System.Abstract.ServiceCacheByDispatcher)">
            <summary>Sets the stub of IServiceCache.Add(Object tag, String name, CacheItemPolicy itemPolicy, Object value, ServiceCacheByDispatcher dispatch)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.sa::System#Abstract#IServiceCache#Get(System.Object,System.String)">
            <summary>Sets the stub of IServiceCache.Get(Object tag, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.sa::System#Abstract#IServiceCache#Get(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sets the stub of IServiceCache.Get(Object tag, IEnumerable`1&lt;String&gt; names)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.sa::System#Abstract#IServiceCache#Get(System.Object,System.String,System.Abstract.IServiceCacheRegistration,System.Abstract.CacheItemHeader@)">
            <summary>Sets the stub of IServiceCache.Get(Object tag, String name, IServiceCacheRegistration registration, CacheItemHeader&amp; header)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.sa::System#Abstract#IServiceCache#Get(System.Object,System.Abstract.IServiceCacheRegistration)">
            <summary>Sets the stub of IServiceCache.Get(Object tag, IServiceCacheRegistration registration)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.sa::System#Abstract#IServiceCache#Remove(System.Object,System.String,System.Abstract.IServiceCacheRegistration)">
            <summary>Sets the stub of IServiceCache.Remove(Object tag, String name, IServiceCacheRegistration registration)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.sa::System#Abstract#IServiceCache#Set(System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object,System.Abstract.ServiceCacheByDispatcher)">
            <summary>Sets the stub of IServiceCache.Set(Object tag, String name, CacheItemPolicy itemPolicy, Object value, ServiceCacheByDispatcher dispatch)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.sa::System#Abstract#IServiceCache#TryGet(System.Object,System.String,System.Object@)">
            <summary>Sets the stub of IServiceCache.TryGet(Object tag, String name, Object&amp; value)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIDistributedServiceCache.global::System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIDistributedServiceCache.TryGetObjectStringObjectOut">
            <summary>Sets the stub of IServiceCache.TryGet(Object tag, String name, Object&amp; value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIDistributedServiceCache.System#Abstract#IServiceCache#Item(System.String)">
            <summary>Sets the stub of IServiceCache.get_Item(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIDistributedServiceCache.sa::System#Abstract#IServiceCache#Settings">
            <summary>Sets the stub of IServiceCache.get_Settings()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIEvent">
            <summary>Stub type of System.Abstract.IEvent</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEvent.#ctor">
            <summary>Initializes a new instance of type StubIEvent</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIEventBus">
            <summary>Stub type of System.Abstract.IEventBus</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventBus.#ctor">
            <summary>Initializes a new instance of type StubIEventBus</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventBus.CreateMessageOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},``0})">
            <summary>Sets stubs of CreateMessage(Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIEventBus.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIEventBus.ReplyObjectArray">
            <summary>Sets the stub of IServiceBus.Reply(Object[] messages)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIEventBus.SendIServiceBusEndpointObjectArray">
            <summary>Sets the stub of IServiceBus.Send(IServiceBusEndpoint destination, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventBus.sa::System#Abstract#IServiceBus#CreateMessage``1(System.Action{``0})">
            <summary>Sets the stub of IServiceBus.CreateMessage(Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventBus.sa::System#Abstract#IServiceBus#Reply(System.Object[])">
            <summary>Sets the stub of IServiceBus.Reply(Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventBus.sa::System#Abstract#IServiceBus#Send(System.Abstract.IServiceBusEndpoint,System.Object[])">
            <summary>Sets the stub of IServiceBus.Send(IServiceBusEndpoint destination, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventBus.global::System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIEventHandler`1">
            <summary>Stub type of System.Abstract.IEventHandler`1</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventHandler`1.#ctor">
            <summary>Initializes a new instance of type StubIEventHandler</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIEventHandler`1.HandleT0">
            <summary>Sets the stub of IEventHandler`1.Handle(!0 event)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventHandler`1.sa::System#Abstract#IEventHandler{TEvent}#Handle(`0)">
            <summary>Sets the stub of IEventHandler`1.Handle(!0 event)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIEventSource">
            <summary>Stub type of System.Abstract.IEventSource</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventSource.#ctor">
            <summary>Initializes a new instance of type StubIEventSource</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIEventSource.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventSource.MakeRepositoryOf1M0ISerDes``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Abstract.ISerDes,System.Abstract.EventSourcing.IAggregateRootRepository})">
            <summary>Sets stubs of MakeRepository(!!0 arg, ISerDes serDes)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventSource.sa::System#Abstract#IEventSource#MakeRepository``1(``0,System.Abstract.ISerDes)">
            <summary>Sets the stub of IEventSource.MakeRepository(!!0 arg, ISerDes serDes)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIEventSource.global::System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIIgnoreServiceLocator">
            <summary>Stub type of System.Abstract.IIgnoreServiceLocator</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIIgnoreServiceLocator.#ctor">
            <summary>Initializes a new instance of type StubIIgnoreServiceLocator</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIPublishingServiceBus">
            <summary>Stub type of System.Abstract.IPublishingServiceBus</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIPublishingServiceBus.#ctor">
            <summary>Initializes a new instance of type StubIPublishingServiceBus</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIPublishingServiceBus.CreateMessageOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},``0})">
            <summary>Sets stubs of CreateMessage(Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIPublishingServiceBus.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIPublishingServiceBus.PublishObjectArray">
            <summary>Sets the stub of IPublishingServiceBus.Publish(Object[] messages)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIPublishingServiceBus.ReplyObjectArray">
            <summary>Sets the stub of IServiceBus.Reply(Object[] messages)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIPublishingServiceBus.SendIServiceBusEndpointObjectArray">
            <summary>Sets the stub of IServiceBus.Send(IServiceBusEndpoint destination, Object[] messages)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIPublishingServiceBus.SubscribeTypePredicateOfObject">
            <summary>Sets the stub of IPublishingServiceBus.Subscribe(Type messageType, Predicate`1&lt;Object&gt; condition)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIPublishingServiceBus.sa::System#Abstract#IPublishingServiceBus#Publish(System.Object[])">
            <summary>Sets the stub of IPublishingServiceBus.Publish(Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIPublishingServiceBus.sa::System#Abstract#IPublishingServiceBus#Subscribe(System.Type,System.Predicate{System.Object})">
            <summary>Sets the stub of IPublishingServiceBus.Subscribe(Type messageType, Predicate`1&lt;Object&gt; condition)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIPublishingServiceBus.sa::System#Abstract#IPublishingServiceBus#Unsubscribe(System.Type)">
            <summary>Sets the stub of IPublishingServiceBus.Unsubscribe(Type messageType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIPublishingServiceBus.sa::System#Abstract#IServiceBus#CreateMessage``1(System.Action{``0})">
            <summary>Sets the stub of IServiceBus.CreateMessage(Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIPublishingServiceBus.sa::System#Abstract#IServiceBus#Reply(System.Object[])">
            <summary>Sets the stub of IServiceBus.Reply(Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIPublishingServiceBus.sa::System#Abstract#IServiceBus#Send(System.Abstract.IServiceBusEndpoint,System.Object[])">
            <summary>Sets the stub of IServiceBus.Send(IServiceBusEndpoint destination, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIPublishingServiceBus.global::System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIPublishingServiceBus.UnsubscribeType">
            <summary>Sets the stub of IPublishingServiceBus.Unsubscribe(Type messageType)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubISerDes">
            <summary>Stub type of System.Abstract.ISerDes</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubISerDes.#ctor">
            <summary>Initializes a new instance of type StubISerDes</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubISerDes.DesManyOf1TypeStream``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.IO.Stream,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets stubs of DesMany(Type type, Stream s)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubISerDes.DesOf1TypeStream``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.IO.Stream,``0})">
            <summary>Sets stubs of Des(Type type, Stream s)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubISerDes.SerManyOf1TypeStreamIEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,System.IO.Stream,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets stubs of SerMany(Type type, Stream s, IEnumerable`1&lt;!!0&gt; graph)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubISerDes.SerOf1TypeStreamM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,System.IO.Stream,``0})">
            <summary>Sets stubs of Ser(Type type, Stream s, !!0 graph)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubISerDes.sa::System#Abstract#ISerDes#Des``1(System.Type,System.IO.Stream)">
            <summary>Sets the stub of ISerDes.Des(Type type, Stream s)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubISerDes.sa::System#Abstract#ISerDes#DesMany``1(System.Type,System.IO.Stream)">
            <summary>Sets the stub of ISerDes.DesMany(Type type, Stream s)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubISerDes.sa::System#Abstract#ISerDes#Ser``1(System.Type,System.IO.Stream,``0)">
            <summary>Sets the stub of ISerDes.Ser(Type type, Stream s, !!0 graph)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubISerDes.sa::System#Abstract#ISerDes#SerMany``1(System.Type,System.IO.Stream,System.Collections.Generic.IEnumerable{``0})">
            <summary>Sets the stub of ISerDes.SerMany(Type type, Stream s, IEnumerable`1&lt;!!0&gt; graph)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceBus">
            <summary>Stub type of System.Abstract.IServiceBus</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBus.#ctor">
            <summary>Initializes a new instance of type StubIServiceBus</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBus.CreateMessageOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},``0})">
            <summary>Sets stubs of CreateMessage(Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceBus.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceBus.ReplyObjectArray">
            <summary>Sets the stub of IServiceBus.Reply(Object[] messages)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceBus.SendIServiceBusEndpointObjectArray">
            <summary>Sets the stub of IServiceBus.Send(IServiceBusEndpoint destination, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBus.sa::System#Abstract#IServiceBus#CreateMessage``1(System.Action{``0})">
            <summary>Sets the stub of IServiceBus.CreateMessage(Action`1&lt;!!0&gt; messageBuilder)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBus.sa::System#Abstract#IServiceBus#Reply(System.Object[])">
            <summary>Sets the stub of IServiceBus.Reply(Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBus.sa::System#Abstract#IServiceBus#Send(System.Abstract.IServiceBusEndpoint,System.Object[])">
            <summary>Sets the stub of IServiceBus.Send(IServiceBusEndpoint destination, Object[] messages)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBus.global::System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceBusCallback">
            <summary>Stub type of System.Abstract.IServiceBusCallback</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBusCallback.#ctor">
            <summary>Initializes a new instance of type StubIServiceBusCallback</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceBusCallback.RegisterAsyncCallbackObject">
            <summary>Sets the stub of IServiceBusCallback.Register(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBusCallback.RegisterOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Action{``0}})">
            <summary>Sets stubs of Register(Action`1&lt;!!0&gt; callback)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBusCallback.sa::System#Abstract#IServiceBusCallback#Register``1(System.Action{``0})">
            <summary>Sets the stub of IServiceBusCallback.Register(Action`1&lt;!!0&gt; callback)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBusCallback.sa::System#Abstract#IServiceBusCallback#Register(System.AsyncCallback,System.Object)">
            <summary>Sets the stub of IServiceBusCallback.Register(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceBusEndpoint">
            <summary>Stub type of System.Abstract.IServiceBusEndpoint</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBusEndpoint.#ctor">
            <summary>Initializes a new instance of type StubIServiceBusEndpoint</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceBusHostRuntime">
            <summary>Stub type of System.Abstract.IServiceBusHostRuntime</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBusHostRuntime.#ctor">
            <summary>Initializes a new instance of type StubIServiceBusHostRuntime</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceBusHostRuntime.Close">
            <summary>Sets the stub of IServiceBusHostRuntime.Close()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceBusHostRuntime.Initialize">
            <summary>Sets the stub of IServiceBusHostRuntime.Initialize()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceBusHostRuntime.OpenIServiceBus">
            <summary>Sets the stub of IServiceBusHostRuntime.Open(IServiceBus bus)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBusHostRuntime.sa::System#Abstract#IServiceBusHostRuntime#Close">
            <summary>Sets the stub of IServiceBusHostRuntime.Close()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBusHostRuntime.sa::System#Abstract#IServiceBusHostRuntime#Initialize">
            <summary>Sets the stub of IServiceBusHostRuntime.Initialize()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceBusHostRuntime.sa::System#Abstract#IServiceBusHostRuntime#Open(System.Abstract.IServiceBus)">
            <summary>Sets the stub of IServiceBusHostRuntime.Open(IServiceBus bus)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceCache">
            <summary>Stub type of System.Abstract.IServiceCache</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.#ctor">
            <summary>Initializes a new instance of type StubIServiceCache</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.AddObjectStringCacheItemPolicyObjectServiceCacheByDispatcher">
            <summary>Sets the stub of IServiceCache.Add(Object tag, String name, CacheItemPolicy itemPolicy, Object value, ServiceCacheByDispatcher dispatch)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.GetObjectIEnumerableOfString">
            <summary>Sets the stub of IServiceCache.Get(Object tag, IEnumerable`1&lt;String&gt; names)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.GetObjectIServiceCacheRegistration">
            <summary>Sets the stub of IServiceCache.Get(Object tag, IServiceCacheRegistration registration)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.GetObjectString">
            <summary>Sets the stub of IServiceCache.Get(Object tag, String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.GetObjectStringIServiceCacheRegistrationCacheItemHeaderOut">
            <summary>Sets the stub of IServiceCache.Get(Object tag, String name, IServiceCacheRegistration registration, CacheItemHeader&amp; header)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.ItemGetString">
            <summary>Sets the stub of IServiceCache.get_Item(String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.ItemSetStringObject">
            <summary>Sets the stub of IServiceCache.set_Item(String name, Object value)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.RemoveObjectStringIServiceCacheRegistration">
            <summary>Sets the stub of IServiceCache.Remove(Object tag, String name, IServiceCacheRegistration registration)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.SetObjectStringCacheItemPolicyObjectServiceCacheByDispatcher">
            <summary>Sets the stub of IServiceCache.Set(Object tag, String name, CacheItemPolicy itemPolicy, Object value, ServiceCacheByDispatcher dispatch)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.SettingsGet">
            <summary>Sets the stub of IServiceCache.get_Settings()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.sa::System#Abstract#IServiceCache#Add(System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object,System.Abstract.ServiceCacheByDispatcher)">
            <summary>Sets the stub of IServiceCache.Add(Object tag, String name, CacheItemPolicy itemPolicy, Object value, ServiceCacheByDispatcher dispatch)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.sa::System#Abstract#IServiceCache#Get(System.Object,System.String)">
            <summary>Sets the stub of IServiceCache.Get(Object tag, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.sa::System#Abstract#IServiceCache#Get(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sets the stub of IServiceCache.Get(Object tag, IEnumerable`1&lt;String&gt; names)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.sa::System#Abstract#IServiceCache#Get(System.Object,System.String,System.Abstract.IServiceCacheRegistration,System.Abstract.CacheItemHeader@)">
            <summary>Sets the stub of IServiceCache.Get(Object tag, String name, IServiceCacheRegistration registration, CacheItemHeader&amp; header)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.sa::System#Abstract#IServiceCache#Get(System.Object,System.Abstract.IServiceCacheRegistration)">
            <summary>Sets the stub of IServiceCache.Get(Object tag, IServiceCacheRegistration registration)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.sa::System#Abstract#IServiceCache#Remove(System.Object,System.String,System.Abstract.IServiceCacheRegistration)">
            <summary>Sets the stub of IServiceCache.Remove(Object tag, String name, IServiceCacheRegistration registration)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.sa::System#Abstract#IServiceCache#Set(System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object,System.Abstract.ServiceCacheByDispatcher)">
            <summary>Sets the stub of IServiceCache.Set(Object tag, String name, CacheItemPolicy itemPolicy, Object value, ServiceCacheByDispatcher dispatch)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.sa::System#Abstract#IServiceCache#TryGet(System.Object,System.String,System.Object@)">
            <summary>Sets the stub of IServiceCache.TryGet(Object tag, String name, Object&amp; value)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCache.global::System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCache.TryGetObjectStringObjectOut">
            <summary>Sets the stub of IServiceCache.TryGet(Object tag, String name, Object&amp; value)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceCache.System#Abstract#IServiceCache#Item(System.String)">
            <summary>Sets the stub of IServiceCache.get_Item(String name)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceCache.sa::System#Abstract#IServiceCache#Settings">
            <summary>Sets the stub of IServiceCache.get_Settings()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceCacheRegistration">
            <summary>Stub type of System.Abstract.IServiceCacheRegistration</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCacheRegistration.#ctor">
            <summary>Initializes a new instance of type StubIServiceCacheRegistration</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCacheRegistration.AbsoluteNameGet">
            <summary>Sets the stub of IServiceCacheRegistration.get_AbsoluteName()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCacheRegistration.AttachRegistrarServiceCacheRegistrarString">
            <summary>Sets the stub of IServiceCacheRegistration.AttachRegistrar(ServiceCacheRegistrar registrar, String absoluteName)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCacheRegistration.NameGet">
            <summary>Sets the stub of IServiceCacheRegistration.get_Name()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCacheRegistration.RegistrarGet">
            <summary>Sets the stub of IServiceCacheRegistration.get_Registrar()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceCacheRegistration.sa::System#Abstract#IServiceCacheRegistration#AttachRegistrar(System.Abstract.ServiceCacheRegistrar,System.String)">
            <summary>Sets the stub of IServiceCacheRegistration.AttachRegistrar(ServiceCacheRegistrar registrar, String absoluteName)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceCacheRegistration.UseHeadersGet">
            <summary>Sets the stub of IServiceCacheRegistration.get_UseHeaders()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceCacheRegistration.sa::System#Abstract#IServiceCacheRegistration#AbsoluteName">
            <summary>Sets the stub of IServiceCacheRegistration.get_AbsoluteName()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceCacheRegistration.sa::System#Abstract#IServiceCacheRegistration#Name">
            <summary>Sets the stub of IServiceCacheRegistration.get_Name()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceCacheRegistration.sa::System#Abstract#IServiceCacheRegistration#Registrar">
            <summary>Sets the stub of IServiceCacheRegistration.get_Registrar()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceCacheRegistration.sa::System#Abstract#IServiceCacheRegistration#UseHeaders">
            <summary>Sets the stub of IServiceCacheRegistration.get_UseHeaders()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceLocator">
            <summary>Stub type of System.Abstract.IServiceLocator</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.#ctor">
            <summary>Initializes a new instance of type StubIServiceLocator</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocator.CreateChildObject">
            <summary>Sets the stub of IServiceLocator.CreateChild(Object tag)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocator.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocator.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.GetUnderlyingContainerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of GetUnderlyingContainer()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.InjectOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``0})">
            <summary>Sets stubs of Inject(!!0 instance)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocator.RegistrarGet">
            <summary>Sets the stub of IServiceLocator.get_Registrar()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocator.ReleaseObject">
            <summary>Sets the stub of IServiceLocator.Release(Object instance)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets stubs of ResolveAll()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocator.ResolveAllType">
            <summary>Sets the stub of IServiceLocator.ResolveAll(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of Resolve()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets stubs of Resolve(String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocator.ResolveType">
            <summary>Sets the stub of IServiceLocator.Resolve(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocator.ResolveTypeString">
            <summary>Sets the stub of IServiceLocator.Resolve(Type serviceType, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#CreateChild(System.Object)">
            <summary>Sets the stub of IServiceLocator.CreateChild(Object tag)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#GetUnderlyingContainer``1">
            <summary>Sets the stub of IServiceLocator.GetUnderlyingContainer()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#Inject``1(``0)">
            <summary>Sets the stub of IServiceLocator.Inject(!!0 instance)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#Release(System.Object)">
            <summary>Sets the stub of IServiceLocator.Release(Object instance)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#Resolve(System.Type)">
            <summary>Sets the stub of IServiceLocator.Resolve(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#Resolve``1">
            <summary>Sets the stub of IServiceLocator.Resolve()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#Resolve``1(System.String)">
            <summary>Sets the stub of IServiceLocator.Resolve(String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#Resolve(System.Type,System.String)">
            <summary>Sets the stub of IServiceLocator.Resolve(Type serviceType, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#ResolveAll``1">
            <summary>Sets the stub of IServiceLocator.ResolveAll()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#ResolveAll(System.Type)">
            <summary>Sets the stub of IServiceLocator.ResolveAll(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#TearDown``1(``0)">
            <summary>Sets the stub of IServiceLocator.TearDown(!!0 instance)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.global::System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocator.TearDownOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of TearDown(!!0 instance)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceLocator.sa::System#Abstract#IServiceLocator#Registrar">
            <summary>Sets the stub of IServiceLocator.get_Registrar()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceLocatorInterceptor">
            <summary>Stub type of System.Abstract.IServiceLocatorInterceptor</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocatorInterceptor.#ctor">
            <summary>Initializes a new instance of type StubIServiceLocatorInterceptor</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocatorInterceptor.ItemCreatedTypeBoolean">
            <summary>Sets the stub of IServiceLocatorInterceptor.ItemCreated(Type createdItem, Boolean isTransient)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLocatorInterceptor.MatchType">
            <summary>Sets the stub of IServiceLocatorInterceptor.Match(Type type)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocatorInterceptor.sa::System#Abstract#IServiceLocatorInterceptor#ItemCreated(System.Type,System.Boolean)">
            <summary>Sets the stub of IServiceLocatorInterceptor.ItemCreated(Type createdItem, Boolean isTransient)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLocatorInterceptor.sa::System#Abstract#IServiceLocatorInterceptor#Match(System.Type)">
            <summary>Sets the stub of IServiceLocatorInterceptor.Match(Type type)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceLog">
            <summary>Stub type of System.Abstract.IServiceLog</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLog.#ctor">
            <summary>Initializes a new instance of type StubIServiceLog</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLog.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLog.GetString">
            <summary>Sets the stub of IServiceLog.Get(String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLog.GetType">
            <summary>Sets the stub of IServiceLog.Get(Type type)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLog.NameGet">
            <summary>Sets the stub of IServiceLog.get_Name()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLog.sa::System#Abstract#IServiceLog#Get(System.String)">
            <summary>Sets the stub of IServiceLog.Get(String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLog.sa::System#Abstract#IServiceLog#Get(System.Type)">
            <summary>Sets the stub of IServiceLog.Get(Type type)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLog.sa::System#Abstract#IServiceLog#Write(System.Abstract.ServiceLogLevel,System.Exception,System.String)">
            <summary>Sets the stub of IServiceLog.Write(ServiceLogLevel level, Exception ex, String s)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceLog.global::System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceLog.WriteServiceLogLevelExceptionString">
            <summary>Sets the stub of IServiceLog.Write(ServiceLogLevel level, Exception ex, String s)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceLog.sa::System#Abstract#IServiceLog#Name">
            <summary>Sets the stub of IServiceLog.get_Name()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceMap">
            <summary>Stub type of System.Abstract.IServiceMap</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceMap.#ctor">
            <summary>Initializes a new instance of type StubIServiceMap</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceMap.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceMap.global::System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceMessageHandler">
            <summary>Stub type of System.Abstract.IServiceMessageHandler</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceMessageHandler.#ctor">
            <summary>Initializes a new instance of type StubIServiceMessageHandler</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceMessageHandler`1">
            <summary>Stub type of System.Abstract.IServiceMessageHandler`1</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceMessageHandler`1.#ctor">
            <summary>Initializes a new instance of type StubIServiceMessageHandler</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceMessageHandler`1.HandleT0">
            <summary>Sets the stub of IServiceMessageHandler`1.Handle(!0 message)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceMessageHandler`1.sa::System#Abstract#IServiceMessageHandler{TMessage}#Handle(`0)">
            <summary>Sets the stub of IServiceMessageHandler`1.Handle(!0 message)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceRegistrant">
            <summary>Stub type of System.Abstract.IServiceRegistrant</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrant.#ctor">
            <summary>Initializes a new instance of type StubIServiceRegistrant</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrant.RegisterIServiceRegistrar">
            <summary>Sets the stub of IServiceRegistrant.Register(IServiceRegistrar registrar)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrant.sa::System#Abstract#IServiceRegistrant#Register(System.Abstract.IServiceRegistrar)">
            <summary>Sets the stub of IServiceRegistrant.Register(IServiceRegistrar registrar)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceRegistrar">
            <summary>Stub type of System.Abstract.IServiceRegistrar</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.#ctor">
            <summary>Initializes a new instance of type StubIServiceRegistrar</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.GetRegistrationsForType">
            <summary>Sets the stub of IServiceRegistrar.GetRegistrationsFor(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.HasRegisteredOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Boolean})">
            <summary>Sets stubs of HasRegistered()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.HasRegisteredType">
            <summary>Sets the stub of IServiceRegistrar.HasRegistered(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.LifetimeForRegistersGet">
            <summary>Sets the stub of IServiceRegistrar.get_LifetimeForRegisters()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.LocatorGet">
            <summary>Sets the stub of IServiceRegistrar.get_Locator()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.RegisterInstanceOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of RegisterInstance(!!0 instance)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.RegisterInstanceOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,System.String})">
            <summary>Sets stubs of RegisterInstance(!!0 instance, String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegisterInstanceTypeObject">
            <summary>Sets the stub of IServiceRegistrar.RegisterInstance(Type serviceType, Object instance)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegisterInstanceTypeObjectString">
            <summary>Sets the stub of IServiceRegistrar.RegisterInstance(Type serviceType, Object instance, String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegisterInterceptorIServiceLocatorInterceptor">
            <summary>Sets the stub of IServiceRegistrar.RegisterInterceptor(IServiceLocatorInterceptor interceptor)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.RegisterOf1FuncOfIServiceLocatorM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Func{System.Abstract.IServiceLocator,``0}})">
            <summary>Sets stubs of Register(Func`2&lt;IServiceLocator,!!0&gt; factoryMethod)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.RegisterOf1FuncOfIServiceLocatorM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Func{System.Abstract.IServiceLocator,``0},System.String})">
            <summary>Sets stubs of Register(Func`2&lt;IServiceLocator,!!0&gt; factoryMethod, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.RegisterOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type})">
            <summary>Sets stubs of Register(Type implementationType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.RegisterOf1TypeString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,System.String})">
            <summary>Sets stubs of Register(Type implementationType, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.RegisterOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets stubs of Register()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.RegisterOf2String``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String})">
            <summary>Sets stubs of Register(String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegisterType">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegisterTypeFuncOfIServiceLocatorObject">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, Func`2&lt;IServiceLocator,Object&gt; factoryMethod)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegisterTypeFuncOfIServiceLocatorObjectString">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, Func`2&lt;IServiceLocator,Object&gt; factoryMethod, String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegisterTypeString">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegisterTypeType">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, Type implementationType)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegisterTypeTypeString">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, Type implementationType, String name)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrar.RegistrationsGet">
            <summary>Sets the stub of IServiceRegistrar.get_Registrations()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#GetRegistrationsFor(System.Type)">
            <summary>Sets the stub of IServiceRegistrar.GetRegistrationsFor(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#HasRegistered``1">
            <summary>Sets the stub of IServiceRegistrar.HasRegistered()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#HasRegistered(System.Type)">
            <summary>Sets the stub of IServiceRegistrar.HasRegistered(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register``2">
            <summary>Sets the stub of IServiceRegistrar.Register()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register``2(System.String)">
            <summary>Sets the stub of IServiceRegistrar.Register(String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register(System.Type)">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register``1(System.Type)">
            <summary>Sets the stub of IServiceRegistrar.Register(Type implementationType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register``1(System.Func{System.Abstract.IServiceLocator,``0})">
            <summary>Sets the stub of IServiceRegistrar.Register(Func`2&lt;IServiceLocator,!!0&gt; factoryMethod)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register(System.Type,System.String)">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register``1(System.Type,System.String)">
            <summary>Sets the stub of IServiceRegistrar.Register(Type implementationType, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register(System.Type,System.Type)">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, Type implementationType)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register(System.Type,System.Func{System.Abstract.IServiceLocator,System.Object})">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, Func`2&lt;IServiceLocator,Object&gt; factoryMethod)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register``1(System.Func{System.Abstract.IServiceLocator,``0},System.String)">
            <summary>Sets the stub of IServiceRegistrar.Register(Func`2&lt;IServiceLocator,!!0&gt; factoryMethod, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register(System.Type,System.Type,System.String)">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, Type implementationType, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Register(System.Type,System.Func{System.Abstract.IServiceLocator,System.Object},System.String)">
            <summary>Sets the stub of IServiceRegistrar.Register(Type serviceType, Func`2&lt;IServiceLocator,Object&gt; factoryMethod, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#RegisterInstance``1(``0)">
            <summary>Sets the stub of IServiceRegistrar.RegisterInstance(!!0 instance)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#RegisterInstance(System.Type,System.Object)">
            <summary>Sets the stub of IServiceRegistrar.RegisterInstance(Type serviceType, Object instance)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#RegisterInstance``1(``0,System.String)">
            <summary>Sets the stub of IServiceRegistrar.RegisterInstance(!!0 instance, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#RegisterInstance(System.Type,System.Object,System.String)">
            <summary>Sets the stub of IServiceRegistrar.RegisterInstance(Type serviceType, Object instance, String name)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#RegisterInterceptor(System.Abstract.IServiceLocatorInterceptor)">
            <summary>Sets the stub of IServiceRegistrar.RegisterInterceptor(IServiceLocatorInterceptor interceptor)</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#LifetimeForRegisters">
            <summary>Sets the stub of IServiceRegistrar.get_LifetimeForRegisters()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Locator">
            <summary>Sets the stub of IServiceRegistrar.get_Locator()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceRegistrar.sa::System#Abstract#IServiceRegistrar#Registrations">
            <summary>Sets the stub of IServiceRegistrar.get_Registrations()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceRegistrarBehaviorAccessor">
            <summary>Stub type of System.Abstract.IServiceRegistrarBehaviorAccessor</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrarBehaviorAccessor.#ctor">
            <summary>Initializes a new instance of type StubIServiceRegistrarBehaviorAccessor</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceRegistrarBehaviorAccessor.AttachBackingFieldToLifetime">
            <summary>Attaches delegates to emulate StubIServiceRegistrarBehaviorAccessor.Lifetime as a property with a backing field.</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrarBehaviorAccessor.LifetimeGet">
            <summary>Sets the stub of IServiceRegistrarBehaviorAccessor.get_Lifetime()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrarBehaviorAccessor.LifetimeSetServiceRegistrarLifetime">
            <summary>Sets the stub of IServiceRegistrarBehaviorAccessor.set_Lifetime(ServiceRegistrarLifetime value)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceRegistrarBehaviorAccessor.RegisterInLocatorGet">
            <summary>Sets the stub of IServiceRegistrarBehaviorAccessor.get_RegisterInLocator()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceRegistrarBehaviorAccessor.sa::System#Abstract#IServiceRegistrarBehaviorAccessor#Lifetime">
            <summary>Sets the stub of IServiceRegistrarBehaviorAccessor.get_Lifetime()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceRegistrarBehaviorAccessor.sa::System#Abstract#IServiceRegistrarBehaviorAccessor#RegisterInLocator">
            <summary>Sets the stub of IServiceRegistrarBehaviorAccessor.get_RegisterInLocator()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIServiceWrapper`1">
            <summary>Stub type of System.Abstract.IServiceWrapper`1</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIServiceWrapper`1.#ctor">
            <summary>Initializes a new instance of type StubIServiceWrapper</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIServiceWrapper`1.ParentGet">
            <summary>Sets the stub of IServiceWrapper`1.get_Parent()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIServiceWrapper`1.sa::System#Abstract#IServiceWrapper{T}#Parent">
            <summary>Sets the stub of IServiceWrapper`1.get_Parent()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubITouchableCacheItem">
            <summary>Stub type of System.Abstract.ITouchableCacheItem</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubITouchableCacheItem.#ctor">
            <summary>Initializes a new instance of type StubITouchableCacheItem</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubITouchableCacheItem.MakeDependencyObjectStringArray">
            <summary>Sets the stub of ITouchableCacheItem.MakeDependency(Object tag, String[] names)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubITouchableCacheItem.sa::System#Abstract#ITouchableCacheItem#MakeDependency(System.Object,System.String[])">
            <summary>Sets the stub of ITouchableCacheItem.MakeDependency(Object tag, String[] names)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubITouchableCacheItem.sa::System#Abstract#ITouchableCacheItem#Touch(System.Object,System.String[])">
            <summary>Sets the stub of ITouchableCacheItem.Touch(Object tag, String[] names)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubITouchableCacheItem.TouchObjectStringArray">
            <summary>Sets the stub of ITouchableCacheItem.Touch(Object tag, String[] names)</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute">
            <summary>Stub type of System.Abstract.IgnoreServiceLocatorAttribute</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubIgnoreServiceLocatorAttribute</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubIgnoreServiceLocatorAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubLiteralServiceBusEndpoint">
            <summary>Stub type of System.Abstract.LiteralServiceBusEndpoint</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubLiteralServiceBusEndpoint.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubLiteralServiceBusEndpoint.InitializeStub">
            <summary>Initializes a new instance of type StubLiteralServiceBusEndpoint</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubLiteralServiceBusEndpoint.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubLiteralServiceBusEndpoint.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubLiteralServiceBusEndpoint.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceBusManager">
            <summary>Stub type of System.Abstract.ServiceBusManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusManager.InitializeStub">
            <summary>Initializes a new instance of type StubServiceBusManager</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceBusManagerLogger">
            <summary>Stub type of System.Abstract.ServiceBusManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusManagerLogger.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusManagerLogger.InitializeStub">
            <summary>Initializes a new instance of type StubServiceBusManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusManagerLogger.Started">
            <summary>Sets the stub of ServiceBusManagerLogger.Started()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusManagerLogger.Started01">
            <summary>Sets the stub of ServiceBusManagerLogger.Started()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusManagerLogger.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusManagerLogger.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusManagerLogger.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceBusMessageException">
            <summary>Stub type of System.Abstract.ServiceBusMessageException</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusMessageException.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusMessageException.#ctor(System.Type,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusMessageException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubServiceBusMessageException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusMessageException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubServiceBusMessageException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusMessageException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusMessageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusMessageException.InitializeStub">
            <summary>Initializes a new instance of type StubServiceBusMessageException</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceBusMessageException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceBusMessageException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusMessageException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusMessageException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusMessageException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusMessageException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusMessageException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusMessageException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusMessageException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceBusMessageException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceCacheForeignRegistration">
            <summary>Stub type of System.Abstract.ServiceCacheForeignRegistration</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheForeignRegistration.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheForeignRegistration.#ctor(System.String,System.Type,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheForeignRegistration.InitializeStub">
            <summary>Initializes a new instance of type StubServiceCacheForeignRegistration</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheForeignRegistration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheForeignRegistration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheForeignRegistration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceCacheManager">
            <summary>Stub type of System.Abstract.ServiceCacheManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheManager.InitializeStub">
            <summary>Initializes a new instance of type StubServiceCacheManager</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceCacheManagerLogger">
            <summary>Stub type of System.Abstract.ServiceCacheManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheManagerLogger.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheManagerLogger.InitializeStub">
            <summary>Initializes a new instance of type StubServiceCacheManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheManagerLogger.Started">
            <summary>Sets the stub of ServiceCacheManagerLogger.Started()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceCacheManagerLogger.Started01">
            <summary>Sets the stub of ServiceCacheManagerLogger.Started()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheManagerLogger.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheManagerLogger.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheManagerLogger.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceCacheRegistration">
            <summary>Stub type of System.Abstract.ServiceCacheRegistration</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemBuilder)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemBuilder,System.Abstract.CacheItemDependency)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemBuilder,System.String[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemBuilder,System.Func{System.Object,System.Object[],System.String[]})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemPolicy,System.Abstract.CacheItemBuilder)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemPolicy,System.Abstract.CacheItemBuilder,System.String[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemPolicy,System.Abstract.CacheItemBuilder,System.Abstract.CacheItemDependency)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemPolicy,System.Abstract.CacheItemBuilder,System.Func{System.Object,System.Object[],System.String[]})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Int32,System.Abstract.CacheItemBuilder,System.String[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Int32,System.Abstract.CacheItemBuilder,System.Abstract.CacheItemDependency)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.#ctor(System.String,System.Int32,System.Abstract.CacheItemBuilder,System.Func{System.Object,System.Object[],System.String[]})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheRegistration.InitializeStub">
            <summary>Initializes a new instance of type StubServiceCacheRegistration</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheRegistration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheRegistration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheRegistration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceCacheSettings">
            <summary>Stub type of System.Abstract.ServiceCacheSettings</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheSettings.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheSettings.#ctor(System.Abstract.ITouchableCacheItem)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceCacheSettings.InitializeStub">
            <summary>Initializes a new instance of type StubServiceCacheSettings</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheSettings.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheSettings.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceCacheSettings.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceLocatorManager">
            <summary>Stub type of System.Abstract.ServiceLocatorManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorManager.InitializeStub">
            <summary>Initializes a new instance of type StubServiceLocatorManager</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceLocatorManagerLogger">
            <summary>Stub type of System.Abstract.ServiceLocatorManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorManagerLogger.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorManagerLogger.InitializeStub">
            <summary>Initializes a new instance of type StubServiceLocatorManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorManagerLogger.Started">
            <summary>Sets the stub of ServiceLocatorManagerLogger.Started()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorManagerLogger.Started01">
            <summary>Sets the stub of ServiceLocatorManagerLogger.Started()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorManagerLogger.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorManagerLogger.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorManagerLogger.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceLocatorResolutionException">
            <summary>Stub type of System.Abstract.ServiceLocatorResolutionException</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.#ctor(System.Type,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubServiceLocatorResolutionException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubServiceLocatorResolutionException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.InitializeStub">
            <summary>Initializes a new instance of type StubServiceLocatorResolutionException</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLocatorResolutionException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLocatorResolutionException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorResolutionException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorResolutionException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorResolutionException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorResolutionException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorResolutionException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorResolutionException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorResolutionException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLocatorResolutionException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceLogManager">
            <summary>Stub type of System.Abstract.ServiceLogManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLogManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLogManager.InitializeStub">
            <summary>Initializes a new instance of type StubServiceLogManager</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLogManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLogManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLogManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceLogManagerLogger">
            <summary>Stub type of System.Abstract.ServiceLogManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLogManagerLogger.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLogManagerLogger.InitializeStub">
            <summary>Initializes a new instance of type StubServiceLogManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceLogManagerLogger.Started">
            <summary>Sets the stub of ServiceLogManagerLogger.Started()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceLogManagerLogger.Started01">
            <summary>Sets the stub of ServiceLogManagerLogger.Started()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLogManagerLogger.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLogManagerLogger.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceLogManagerLogger.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceManagerBase`3">
            <summary>Stub type of System.Abstract.ServiceManagerBase`3</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceManagerBase`3.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceManagerBase`3.InitializeStub">
            <summary>Initializes a new instance of type StubServiceManagerBase</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceManagerBase`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceManagerBase`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceManagerBase`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceMapManager">
            <summary>Stub type of System.Abstract.ServiceMapManager</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceMapManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceMapManager.InitializeStub">
            <summary>Initializes a new instance of type StubServiceMapManager</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceMapManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceMapManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceMapManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Abstract.Fakes.StubServiceMapManagerLogger">
            <summary>Stub type of System.Abstract.ServiceMapManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceMapManagerLogger.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceMapManagerLogger.InitializeStub">
            <summary>Initializes a new instance of type StubServiceMapManagerLogger</summary>
        </member>
        <member name="M:System.Abstract.Fakes.StubServiceMapManagerLogger.Started">
            <summary>Sets the stub of ServiceMapManagerLogger.Started()</summary>
        </member>
        <member name="F:System.Abstract.Fakes.StubServiceMapManagerLogger.Started01">
            <summary>Sets the stub of ServiceMapManagerLogger.Started()</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceMapManagerLogger.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceMapManagerLogger.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Abstract.Fakes.StubServiceMapManagerLogger.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:System.Fakes.ShimLazy`1">
            <summary>Shim type of System.Lazy`1</summary>
        </member>
        <member name="M:System.Fakes.ShimLazy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:System.Fakes.ShimLazy`1.#ctor(System.Lazy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:System.Fakes.ShimLazy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:System.Fakes.ShimLazy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.Constructor">
            <summary>Sets the shim of Lazy`1.Lazy`1()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.ConstructorBoolean">
            <summary>Sets the shim of Lazy`1.Lazy`1(Boolean isThreadSafe)</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.ConstructorFuncOfT0">
            <summary>Sets the shim of Lazy`1.Lazy`1(Func`1&lt;!0&gt; valueFactory)</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.ConstructorFuncOfT0Boolean">
            <summary>Sets the shim of Lazy`1.Lazy`1(Func`1&lt;!0&gt; valueFactory, Boolean isThreadSafe)</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.ConstructorFuncOfT0LazyThreadSafetyMode">
            <summary>Sets the shim of Lazy`1.Lazy`1(Func`1&lt;!0&gt; valueFactory, LazyThreadSafetyMode mode)</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.ConstructorLazyThreadSafetyMode">
            <summary>Sets the shim of Lazy`1.Lazy`1(LazyThreadSafetyMode mode)</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.GetObjectFromModeLazyThreadSafetyMode">
            <summary>Sets the shim of Lazy`1.GetObjectFromMode(LazyThreadSafetyMode mode)</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.IsValueCreatedGet">
            <summary>Sets the shim of Lazy`1.get_IsValueCreated()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.IsValueFaultedGet">
            <summary>Sets the shim of Lazy`1.get_IsValueFaulted()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.LazyInitValue">
            <summary>Sets the shim of Lazy`1.LazyInitValue()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.ModeGet">
            <summary>Sets the shim of Lazy`1.get_Mode()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.OnSerializingStreamingContext">
            <summary>Sets the shim of Lazy`1.OnSerializing(StreamingContext context)</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.StaticConstructor">
            <summary>Sets the shim of Lazy`1.Lazy`1()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.ToString">
            <summary>Sets the shim of Lazy`1.ToString()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.ValueForDebugDisplayGet">
            <summary>Sets the shim of Lazy`1.get_ValueForDebugDisplay()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.ValueGet">
            <summary>Sets the shim of Lazy`1.get_Value()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1._cctorb__0">
            <summary>Sets the shim of Lazy`1.&lt;.cctor&gt;b__0()</summary>
        </member>
        <member name="T:System.Fakes.ShimLazy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.AllInstances.IsValueCreatedGet">
            <summary>Sets the shim of Lazy`1.get_IsValueCreated()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.AllInstances.IsValueFaultedGet">
            <summary>Sets the shim of Lazy`1.get_IsValueFaulted()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.AllInstances.LazyInitValue">
            <summary>Sets the shim of Lazy`1.LazyInitValue()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.AllInstances.ModeGet">
            <summary>Sets the shim of Lazy`1.get_Mode()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.AllInstances.OnSerializingStreamingContext">
            <summary>Sets the shim of Lazy`1.OnSerializing(StreamingContext context)</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.AllInstances.ToString01">
            <summary>Sets the shim of Lazy`1.ToString()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.AllInstances.ValueForDebugDisplayGet">
            <summary>Sets the shim of Lazy`1.get_ValueForDebugDisplay()</summary>
        </member>
        <member name="P:System.Fakes.ShimLazy`1.AllInstances.ValueGet">
            <summary>Sets the shim of Lazy`1.get_Value()</summary>
        </member>
        <member name="T:System.Fakes.StubLazy`1">
            <summary>Stub type of System.Lazy`1</summary>
        </member>
        <member name="M:System.Fakes.StubLazy`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Fakes.StubLazy`1.#ctor(System.Func{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Fakes.StubLazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Fakes.StubLazy`1.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Fakes.StubLazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Fakes.StubLazy`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:System.Fakes.StubLazy`1.InitializeStub">
            <summary>Initializes a new instance of type StubLazy</summary>
        </member>
        <member name="M:System.Fakes.StubLazy`1.ToString">
            <summary>Sets the stub of Lazy`1.ToString()</summary>
        </member>
        <member name="F:System.Fakes.StubLazy`1.ToString01">
            <summary>Sets the stub of Lazy`1.ToString()</summary>
        </member>
        <member name="P:System.Fakes.StubLazy`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:System.Fakes.StubLazy`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:System.Fakes.StubLazy`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
